{
  "version": 3,
  "sources": ["../node_modules/mz-canvas/node_modules/mz-math/src/main/format.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/random.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/other.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/color.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/id.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/shapes.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-canvas/node_modules/mz-math/src/main/animation.ts", "../node_modules/mz-canvas/src/core/canvas.ts", "../node_modules/mz-canvas/src/core/shapes/primitive-shapes.ts", "../node_modules/mz-math/src/main/format.ts", "../node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-math/src/main/random.ts", "../node_modules/mz-math/src/main/other.ts", "../node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-math/src/main/color.ts", "../node_modules/mz-math/src/main/id.ts", "../node_modules/mz-math/src/main/shapes.ts", "../node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-math/src/main/animation.ts", "../src/core/domain/colors-provider.ts", "../src/core/domain/connections-provider.ts", "../node_modules/mz-svg/src/main/core.ts", "../node_modules/mz-svg/src/main/shapes/primitive-shapes.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/format.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/random.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/other.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/color.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/id.ts", "../node_modules/mz-svg/node_modules/mz-math/src/main/shapes.ts", "../node_modules/mz-svg/src/main/path/scanner.ts", "../node_modules/mz-svg/src/main/path/parser.ts", "../node_modules/mz-svg/src/main/path/minify.ts", "../node_modules/mz-svg/src/main/path/convert.ts", "../node_modules/mz-svg/src/main/path/index.ts", "../node_modules/mz-svg/src/main/shapes/stars.ts", "../node_modules/mz-svg/src/main/shapes/flowers.ts", "../node_modules/mz-svg/src/main/shapes/shape-paths.ts", "../node_modules/mz-svg/src/main/io-browser.ts", "../node_modules/mz-svg/src/main/containers.ts", "../node_modules/mz-svg/src/main/helpers.ts", "../node_modules/mz-svg/src/main/path/bbox.ts", "../node_modules/mz-svg/src/main/path/transform.ts", "../node_modules/mz-svg/src/main/animation/animate.ts", "../node_modules/tinycolor2/esm/tinycolor.js", "../src/core/domain/particles-provider.ts", "../src/core/domain/settings-provider.ts", "../src/core/app.ts", "../src/core/index.ts"],
  "sourcesContent": ["export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "import { ICanvas, IFillProps, IStrokeProps } from '../interfaces';\nimport { isNumber } from 'mz-math';\n\nconst setAttributes = ($canvas: HTMLCanvasElement, attributes: [string, string|number|undefined][]) => {\n    for(const attr of attributes){\n\n        const value = attr[1];\n        if(value === undefined) continue;\n\n        const key = attr[0];\n        $canvas.setAttribute(key, value.toString());\n    }\n};\n\nexport const setContextProps = (props: [string, string|number|undefined][], ctx: CanvasRenderingContext2D) => {\n    for(const prop of props){\n\n        const value = prop[1];\n        if(value === undefined) continue;\n\n        const key = prop[0];\n        ctx[key] = value;\n    }\n};\n\nexport const setCanvasSize = (\n    $canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D|null,\n    props: ICanvas,\n    restoreImageData?: boolean\n) => {\n\n    const isNumericDims = isNumber(props.width) && isNumber(props.height);\n    let _width = isNumericDims ? (props.width as number) : 0;\n    let _height = isNumericDims ? (props.height as number) : 0;\n\n    if(!isNumericDims){\n        const isCanvasInDOM = !!$canvas.parentNode;\n\n        if(!isCanvasInDOM){\n            document.body.append($canvas);\n        }\n\n        const rect = $canvas.getBoundingClientRect();\n        _width = rect.width;\n        _height = rect.height;\n\n        if(!isCanvasInDOM){\n            $canvas.remove();\n        }\n    }\n\n    let imageData: ImageData|undefined = undefined;\n\n    if(restoreImageData){\n        // changing the size of the canvas clears it;\n        // save it, and then restore\n        imageData = ctx?.getImageData(0, 0, $canvas.width, $canvas.height);\n    }\n\n    $canvas.width = _width;\n    $canvas.height = _height;\n\n    if(ctx && restoreImageData && imageData ){\n        ctx.putImageData(imageData, 0, 0);\n    }\n};\n\nexport const canvas = (props: ICanvas) => {\n\n    const $canvas: HTMLCanvasElement = document.createElement('canvas');\n\n    setAttributes($canvas, [\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n        ['title', props.title],\n        ['tabindex', props.tabindex],\n        ['role', props.role],\n        ['aria-label', props.ariaLabel],\n    ]);\n\n    // Used to make the canvas accessible by providing fallback text\n    // to be displayed when the media doesn't load\n    // or the user is unable to experience it as intended\n    if(props.fallback){\n        $canvas.textContent = props.fallback;\n    }\n\n    const ctx =\n        typeof $canvas.getContext === 'function' ?\n            $canvas.getContext('2d', props.contextAttributes) :\n            null;\n\n    setCanvasSize($canvas, ctx, props);\n\n    return { ctx, $canvas };\n};\n\nexport const stroke = (props: IStrokeProps, ctx: CanvasRenderingContext2D) => {\n    setContextProps([\n        ['lineWidth', props.lineWidth],\n        ['strokeStyle', props.strokeStyle],\n        ['lineCap', props.lineCap],\n        ['lineJoin', props.lineJoin],\n        ['miterLimit', props.miterLimit],\n        ['lineDashOffset', props.lineDashOffset],\n    ],ctx);\n\n    if(props.lineDashSegments){\n        ctx.setLineDash(props.lineDashSegments);\n    }\n};\n\nexport const fill = (props: IFillProps, ctx: CanvasRenderingContext2D) => {\n\n    if(props.fillStyle !== undefined){\n        ctx.fillStyle = props.fillStyle;\n    }\n\n    setContextProps([\n        ['shadowOffsetX', props.shadowOffsetX],\n        ['shadowOffsetY', props.shadowOffsetY],\n        ['shadowBlur', props.shadowBlur],\n        ['shadowColor', props.shadowColor],\n    ],ctx);\n};", "import { fill, stroke } from '../canvas';\nimport {\n    IPolynomialProps,\n    IRectProps,\n    ICircleProps,\n    ILineProps,\n} from '../../interfaces';\n\n/**\n * Draw a line.\n */\nexport const line = (props: ILineProps, ctx: CanvasRenderingContext2D) => {\n\n    const { x1, y1, x2, y2 } = props;\n\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Get Path2D of a line, and optionally draw it.\n */\nexport const linePath = (props: ILineProps, ctx?: CanvasRenderingContext2D) : Path2D => {\n\n    const { x1, y1, x2, y2 } = props;\n\n    const path = new Path2D();\n\n    path.moveTo(x1, y1);\n    path.lineTo(x2, y2);\n\n    if(!ctx) return path;\n\n    ctx.save();\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke(path);\n    }\n\n    ctx.restore();\n\n    return path;\n};\n\n/**\n * Draw a rectangle, including a rectangle with rounded corners.\n * Can also \"clear\" a rectangular space.\n */\nexport const rect = (props: IRectProps, ctx: CanvasRenderingContext2D) => {\n\n    const { x, y, w, h} = props;\n\n    if(props.clear){\n        ctx.clearRect(x, y, w, h);\n        return;\n    }\n\n    if(props.radii){\n        ctx.save();\n\n        fill(props, ctx);\n        stroke(props, ctx);\n\n        ctx.beginPath();\n\n        // @ts-ignore\n        ctx.roundRect(x, y, w, h, props.radii)\n        if(props.fillStyle){\n            ctx.fill();\n        }\n\n        if(props.strokeStyle){\n            ctx.stroke();\n        }\n\n        ctx.restore();\n        return;\n    }\n\n    ctx.save();\n\n    if(props.fillStyle){\n        fill(props, ctx);\n        ctx.fillRect(x, y, w, h);\n    }\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.strokeRect(x, y, w, h);\n    }\n\n    ctx.restore();\n};\n\n/**\n * Get Path2D of a rectangle, and optionally draw it.\n */\nexport const rectPath = (props: IRectProps, ctx?: CanvasRenderingContext2D) : Path2D => {\n\n    const { x, y, w, h} = props;\n\n    const path = new Path2D();\n\n    if(props.radii){\n        // @ts-ignore\n        path.roundRect(x, y, w, h, props.radii)\n    }\n    else{\n        path.rect(x, y, w, h);\n    }\n\n    if(!ctx) return path;\n\n    ctx.save();\n\n    if(props.fillStyle){\n        fill(props, ctx);\n        ctx.fill(path);\n    }\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke(path);\n    }\n\n    ctx.restore();\n\n    return path;\n};\n\n/**\n * Used to draw polynomials like triangles etc.\n */\nexport const polynomial = (props: IPolynomialProps, ctx: CanvasRenderingContext2D) => {\n\n    const { points } = props;\n\n    ctx.save();\n\n    fill(props, ctx);\n    stroke(props, ctx);\n\n    ctx.beginPath();\n\n    for(let i= 0; i<points.length; i++) {\n        const point = points[i];\n\n        if(i === 0){\n            ctx.moveTo(point[0], point[1]);\n        }\n        else{\n            ctx.lineTo(point[0], point[1]);\n        }\n    }\n\n    if(props.closed){\n        ctx.closePath();\n    }\n\n    if(props.fillStyle){\n        ctx.fill();\n    }\n\n    if(props.strokeStyle){\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Used to draw polynomials like triangles etc.\n */\nexport const polynomialPath = (props: IPolynomialProps, ctx?: CanvasRenderingContext2D) : Path2D => {\n\n    const { points } = props;\n\n    const path = new Path2D();\n\n    for(let i= 0; i<points.length; i++) {\n        const point = points[i];\n\n        if(i === 0){\n            path.moveTo(point[0], point[1]);\n        }\n        else{\n            path.lineTo(point[0], point[1]);\n        }\n    }\n\n    if(props.closed){\n        path.closePath();\n    }\n\n    if(!ctx) return path;\n\n    ctx.save();\n\n    if(props.fillStyle){\n        fill(props, ctx);\n        ctx.fill(path);\n    }\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke(path);\n    }\n\n    ctx.restore();\n\n    return path;\n};\n\n/**\n * Draw a circle, or it's segment.\n */\nexport const circle = (props: ICircleProps, ctx: CanvasRenderingContext2D) => {\n    const { cx, cy,r} = props;\n\n    const startAngleRad = props.startAngleRad === undefined ? 0 : props.startAngleRad;\n    const endAngleRad = props.endAngleRad === undefined ? 2 * Math.PI : props.endAngleRad;\n\n    ctx.save();\n\n    ctx.beginPath();\n\n    fill(props, ctx);\n    stroke(props, ctx);\n\n    ctx.arc(cx, cy, r, startAngleRad, endAngleRad, props.counterclockwise);\n\n    if(props.fillStyle){\n        ctx.fill();\n    }\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke();\n    }\n\n    ctx.restore();\n};\n\n/**\n * Get Path2D of a circle or its segment, and optionally draw it.\n */\nexport const circlePath = (props: ICircleProps, ctx?: CanvasRenderingContext2D) : Path2D => {\n    const { cx, cy, r } = props;\n\n    const startAngleRad = props.startAngleRad === undefined ? 0 : props.startAngleRad;\n    const endAngleRad = props.endAngleRad === undefined ? 2 * Math.PI : props.endAngleRad;\n\n    const path = new Path2D();\n\n    path.arc(cx, cy, r, startAngleRad, endAngleRad, props.counterclockwise);\n\n    if(!ctx) return path;\n\n    ctx.save();\n\n    if(props.fillStyle){\n        fill(props, ctx);\n        ctx.fill(path);\n    }\n\n    if(props.strokeStyle){\n        stroke(props, ctx);\n        ctx.stroke(path);\n    }\n\n    ctx.restore();\n\n    return path;\n};\n", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "export const rgbaToString = (r: number, g: number, b: number, a: number) => {\n    return `rgba(${ r }, ${ g }, ${ b }, ${ a } )`;\n};", "import { ISettings, IState } from '../interfaces';\nimport { line } from 'mz-canvas';\nimport { v2Distance } from 'mz-math';\nimport { rgbaToString } from './colors-provider';\n\n/**\n * Draw connection between the shapes.\n */\nexport const drawConnections = (options: ISettings, state: IState) => {\n\n    const { particles, ctx, connectionRgbColor } = state;\n\n    const maxConnectionSize = options.maxConnectionSize as number;\n\n    for(let i= 0; i<particles.length; i++){\n        const particle1 = particles[i];\n\n        for(let j= 0; j<particles.length; j++){\n            const particle2 = particles[j];\n\n            const distance = v2Distance(particle1.center, particle2.center);\n            if(distance < maxConnectionSize){\n\n                const opacity = options.maxConnectionSize === 0 ? 1 : (1 - distance / maxConnectionSize);\n\n                line({\n                    x1: particle1.center[0],\n                    y1: particle1.center[1],\n                    x2: particle2.center[0],\n                    y2: particle2.center[1],\n                    strokeStyle: rgbaToString(\n                        connectionRgbColor[0],\n                        connectionRgbColor[1],\n                        connectionRgbColor[2],\n                        opacity,\n                    ),\n                }, ctx);\n            }\n        }\n    }\n};", "import { IPrimitiveShapeProps } from '../interfaces';\n\n/**\n * SVG namespace that is defined in SVG v1.0 Specification\n * and subsequently added to by SVG 1.1, SVG 1.2 and SVG 2\n */\nexport const SVG_NAMESPACE= 'http://www.w3.org/2000/svg';\nexport const XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\nexport const DEFAULT_DECIMAL_PLACES = 2;\n\nexport interface ICreateSVGProps extends IPrimitiveShapeProps{\n    x?: string|number;\n    y?: string|number;\n    width?: string|number;\n    height?: string|number;\n    preserveAspectRatio?: string;\n    viewBox?: string;\n    autoViewBox?: boolean;\n}\n\n/**\n * Create new SVG element in browser or Node.js environment.\n * In case of Node.js, JSDom document can be provided.\n */\nexport const createSVG = (props?: ICreateSVGProps) : SVGSVGElement => {\n\n    const doc = props?.document || window.document;\n    const $svg= doc.createElementNS(SVG_NAMESPACE, 'svg');\n\n    $svg.setAttributeNS(XMLNS_NAMESPACE, 'xmlns', SVG_NAMESPACE);\n\n    let viewBox = props?.viewBox;\n    if(props?.autoViewBox){\n        viewBox = `${ props?.x || 0 } ${ props?.y || 0 } ${ props?.width || 0 } ${ props?.height || 0 }`;\n    }\n\n    setAttributes($svg, [\n        ['x', props?.x],\n        ['y', props?.y],\n        ['width', props?.width],\n        ['height', props?.height],\n        ['viewBox', viewBox],\n        ['preserveAspectRatio', props?.preserveAspectRatio],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $svg;\n};\n\n/**\n * Create SVG document from string\n */\nexport const createSVGFromString = (props: {\n    document?: Document;\n    svg: string;\n}) : SVGSVGElement => {\n    const {\n        document: _document,\n        svg,\n    } = props;\n\n    const doc = _document || window.document;\n\n    const $box = doc.createElement('div');\n    $box.innerHTML = svg;\n    return $box.firstElementChild as SVGSVGElement;\n};\n\nexport const getSVGAsString = ($svg: SVGSVGElement) => {\n    return $svg.outerHTML;\n};\n\nexport const setAttributes = ($svgElement: SVGElement, attr: [string, string|number|undefined][]) => {\n    if(!$svgElement || !attr) return;\n\n    for(const pair of attr){\n        if(pair.length !== 2) continue;\n\n        const prop = pair[0];\n        if(prop === null || prop === undefined) continue;\n\n        const value = pair[1];\n        if(value === null || value === undefined) continue;\n\n        $svgElement.setAttribute(prop, value.toString());\n    }\n};\n\nexport const getCommonAttributes = (props?: IPrimitiveShapeProps) : [string, string|number|undefined][] => {\n\n    if(!props) return [];\n\n    return [\n        ['id', props.id],\n        ['class', props.classes],\n        ['style', props.style],\n\n        ['stroke', props.stroke],\n        ['stroke-width', props.strokeWidth],\n        ['stroke-opacity', props.strokeOpacity],\n        ['stroke-linecap', props.strokeLinecap],\n        ['stroke-linejoin', props.strokeLinejoin],\n        ['stroke-dasharray', props.strokeDasharray],\n        ['stroke-dashoffset', props.strokeDashoffset],\n        ['stroke-miterlimit', props.strokeMiterlimit],\n\n        ['fill', props.fill],\n        ['fill-opacity', props.fillOpacity],\n        ['fill-rule', props.fillRule],\n\n        ['filter', props.filter],\n        ['mask', props.mask],\n        ['transform', props.transform],\n\n        ['vector-effect', props.vectorEffect],\n        ['shape-rendering', props.shapeRendering],\n\n        ['clip-path', props.clipPath],\n        ['clip-rule', props.clipRule],\n\n        ['opacity', props.opacity],\n        ['visibility', props.visibility],\n    ];\n};\n", "import { getCommonAttributes, setAttributes, SVG_NAMESPACE } from '../core';\nimport { IPrimitiveShapeProps } from '../../interfaces';\n\nexport interface ICreatePathProps extends IPrimitiveShapeProps{\n    d?: string;\n    pathLength?: string|number;\n}\n\nexport const createPath = (props?: ICreatePathProps) : SVGPathElement => {\n\n    const doc = props?.document || window.document;\n\n    const $path = doc.createElementNS(SVG_NAMESPACE, 'path');\n\n    if(props?.d){\n        // remove newlines and double spaces\n        props.d = props?.d.replace(/\\s\\s+/g, ' ');\n    }\n\n    setAttributes($path, [\n        ['d', props?.d],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $path;\n};\n\nexport interface ICreateRectProps extends IPrimitiveShapeProps{\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n    rx?: number|string;\n    ry?: number|string;\n    pathLength?: string|number;\n}\n\nexport const createRect = (props?: ICreateRectProps) : SVGRectElement => {\n    const doc = props?.document || window.document;\n\n    const $rect = doc.createElementNS(SVG_NAMESPACE, 'rect');\n\n    setAttributes($rect, [\n        ['x', props?.x],\n        ['y', props?.y],\n        ['rx', props?.rx],\n        ['ry', props?.ry],\n        ['width', props?.width],\n        ['height', props?.height],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $rect;\n};\n\nexport interface ICreateCircleProps extends IPrimitiveShapeProps{\n    cx?: string|number;\n    cy?: string|number;\n    r?: string|number;\n    pathLength?: string|number;\n}\n\nexport const createCircle = (props?: ICreateCircleProps) : SVGCircleElement => {\n\n    const doc = props?.document || window.document;\n    const $circle = doc.createElementNS(SVG_NAMESPACE, 'circle');\n\n    setAttributes($circle, [\n        ['cx', props?.cx],\n        ['cy', props?.cy],\n        ['r', props?.r],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $circle;\n};\n\nexport interface ICreateEllipseProps extends IPrimitiveShapeProps{\n    cx?: string|number;\n    cy?: string|number;\n    rx?: string|number;\n    ry?: string|number;\n    pathLength?: string|number;\n}\n\nexport const createEllipse = (props?: ICreateEllipseProps) : SVGEllipseElement => {\n    const doc = props?.document || window.document;\n    const $ellipse = doc.createElementNS(SVG_NAMESPACE, 'ellipse');\n\n    setAttributes($ellipse, [\n        ['cx', props?.cx],\n        ['cy', props?.cy],\n        ['rx', props?.rx],\n        ['ry', props?.ry],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $ellipse;\n};\n\nexport interface ICreateLineProps extends IPrimitiveShapeProps{\n    x1?: string|number;\n    y1?: string|number;\n    x2?: string|number;\n    y2?: string|number;\n    pathLength?: string|number;\n}\n\nexport const createLine = (props?: ICreateLineProps) : SVGLineElement => {\n    const doc = props?.document || window.document;\n    const $line = doc.createElementNS(SVG_NAMESPACE, 'line');\n\n    setAttributes($line, [\n        ['x1', props?.x1],\n        ['x2', props?.x2],\n        ['y1', props?.y1],\n        ['y2', props?.y2],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $line;\n};\n\nexport interface ICreatePolygonProps extends IPrimitiveShapeProps{\n    points?: string;\n    pathLength?: string|number;\n}\n\nexport const createPolygon = (props?: ICreatePolygonProps) : SVGPolygonElement => {\n    const doc = props?.document || window.document;\n    const $polygon = doc.createElementNS(SVG_NAMESPACE, 'polygon');\n\n    setAttributes($polygon, [\n        ['id', props?.id],\n        ['class', props?.classes],\n        ['style', props?.style],\n        ['points', props?.points],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $polygon;\n};\n\nexport interface ICreatePolylineProps extends IPrimitiveShapeProps{\n    points?: string;\n    pathLength?: string|number;\n}\n\nexport const createPolyline = (props?: ICreatePolylineProps) : SVGPolylineElement => {\n    const doc = props?.document || window.document;\n\n    const $polyline = doc.createElementNS(SVG_NAMESPACE, 'polyline');\n\n    setAttributes($polyline, [\n        ['id', props?.id],\n        ['class', props?.classes],\n        ['style', props?.style],\n        ['points', props?.points],\n        ['pathLength', props?.pathLength],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $polyline;\n};\n", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { EPathDataCommand, IPathDataScanResult } from './interfaces';\n\nconst NUMBER_REGEX = /^[+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d+)?(?:(?<=\\d)(?:[eE][+-]?\\d+))?/;\n\n/**\n * Path Data Scanner.\n */\nexport const scan = (pathData?: string) : IPathDataScanResult => {\n\n    const result: IPathDataScanResult = {\n        tokens: [],\n        errors: [],\n    };\n\n    if(!pathData || pathData.trim() === '') return result;\n\n    let current = 0;\n    let line = 0;\n    let col = 0;\n\n    const isEnd = () => {\n        return current >= pathData.length;\n    };\n\n    const addKeywordToken = (tokenType: EPathDataCommand) => {\n        result.tokens.push({\n            tokenType,\n            line,\n            col,\n        });\n    };\n\n    const addNumberToken = (num: number|string) => {\n        result.tokens.push({\n            tokenType: 'num',\n            value: num,\n            line,\n            col,\n        });\n    };\n\n    const addError = (msg: string) => {\n        result.errors.push({\n            line,\n            col,\n            msg,\n        });\n    };\n\n    const matchNumber = () : boolean => {\n        if(isEnd()) return false;\n        return NUMBER_REGEX.test(pathData.substring(current));\n    };\n\n    /**\n     * Scan a single token.\n     */\n    const scanToken = () => {\n        const char = pathData[current];\n\n        // Path data can contain newline characters and\n        // thus can be broken up into multiple lines to improve readability.\n        // If a newline character ---> update line and col params.\n        if(char.charAt(0) === '\\n' || char.charAt(0) === '\\r'){\n            current++;\n            col = 0;\n            line++;\n            return;\n        }\n\n        // Superfluous white space and separators such as commas can be eliminated.\n        // \"M 100 100 L 200 200\" contains unnecessary spaces and could be expressed more compactly as \"M100 100L200 200\".\n        if(/\\s/.test(char) || char === ','){\n            current++;\n            col++;\n            return;\n        }\n\n        // try to match a number\n        if(matchNumber()){\n            const matchRes = pathData.substring(current).match(NUMBER_REGEX);\n\n            if(matchRes && matchRes.length > 0){\n                const num = matchRes[0];\n                addNumberToken(num);\n\n                current += num.length;\n                col += num.length;\n                return;\n            }\n        }\n\n        switch(char){\n            case 'M': addKeywordToken(EPathDataCommand.MoveToAbs); break;\n            case 'm': addKeywordToken(EPathDataCommand.MoveToRel); break;\n            case 'Z': addKeywordToken(EPathDataCommand.ClosePathAbs); break;\n            case 'z': addKeywordToken(EPathDataCommand.ClosePathRel); break;\n            case 'L': addKeywordToken(EPathDataCommand.LineToAbs); break;\n            case 'l': addKeywordToken(EPathDataCommand.LineToRel); break;\n            case 'H': addKeywordToken(EPathDataCommand.LineToHorizontalAbs); break;\n            case 'h': addKeywordToken(EPathDataCommand.LineToHorizontalRel); break;\n            case 'V': addKeywordToken(EPathDataCommand.LineToVerticalAbs); break;\n            case 'v': addKeywordToken(EPathDataCommand.LineToVerticalRel); break;\n            case 'C': addKeywordToken(EPathDataCommand.CubicCurveToAbs); break;\n            case 'c': addKeywordToken(EPathDataCommand.CubicCurveToRel); break;\n            case 'S': addKeywordToken(EPathDataCommand.CubicCurveToSmoothAbs); break;\n            case 's': addKeywordToken(EPathDataCommand.CubicCurveToSmoothRel); break;\n            case 'Q': addKeywordToken(EPathDataCommand.QuadraticCurveToAbs); break;\n            case 'q': addKeywordToken(EPathDataCommand.QuadraticCurveToRel); break;\n            case 'T': addKeywordToken(EPathDataCommand.QuadraticCurveToSmoothAbs); break;\n            case 't': addKeywordToken(EPathDataCommand.QuadraticCurveToSmoothRel); break;\n            case 'A': addKeywordToken(EPathDataCommand.ArcAbs); break;\n            case 'a': addKeywordToken(EPathDataCommand.ArcRel); break;\n\n            default: {\n                addError(`Unexpected character ${ char }`);\n                break;\n            }\n        }\n\n        current++;\n        col++;\n    };\n\n    /**\n     * The loop.\n     */\n    while(!isEnd()){\n        scanToken();\n    }\n\n    return result;\n};", "import { EPathDataCommand, IPathData, IPathDataScanResult, IPathDataToken } from './interfaces';\n\n/**\n * All path data instructions are expressed as one character (e.g., a moveto is expressed as an M).\n * Relative versions of all commands are available (uppercase means absolute coordinates, lowercase means relative coordinates).\n * https://www.w3.org/TR/SVG11/paths.html#PathData\n */\nexport const parse = (scanResult: IPathDataScanResult) : IPathData => {\n\n    const pathData: IPathData = {\n        commands: [],\n        errors: scanResult.errors || [],\n    };\n\n    if(scanResult.errors.length > 0 ||\n        scanResult.tokens.length === 0) return pathData;\n\n    const { tokens, errors } = scanResult;\n\n    const error = (token: IPathDataToken, msg: string) => {\n        errors.push({\n            line: token?.line,\n            col: token?.col,\n            msg,\n        });\n    };\n\n    // https://www.w3.org/TR/SVG11/paths.html#PathDataMovetoCommands\n    // A path data segment (if there is one) must begin with a \"moveto\" command.\n    if(tokens[0].tokenType !== EPathDataCommand.MoveToAbs &&\n        tokens[0].tokenType !== EPathDataCommand.MoveToRel) {\n        error(tokens[0], `A path data segment must begin with a 'moveto' command 'M' or 'm'.`);\n        return pathData;\n    }\n\n    let current = 0;\n\n    const isEnd = () => {\n        return current >= tokens.length;\n    };\n\n    const areArcFlagsValid = (tokenType: string): boolean => {\n\n        // we are checking only 'A/a' type\n        if(!tokenType || tokenType.toLowerCase() !== 'a') return true;\n\n        // 4th and 5th param should be 0 or 1\n        const val4 = (tokens[current + 4]?.value || '').toString();\n        const val5 = (tokens[current + 5]?.value || '').toString();\n\n        return (val4 === '0' || val4 === '1') && (val5 === '0' || val5 === '1');\n    };\n\n    /**\n     * https://www.w3.org/TR/SVG11/paths.html#PathData\n     */\n    const parseCommand = (paramsCount: number, nextParamsTokenType: EPathDataCommand, isRelative: boolean) => {\n\n        const tokenType = tokens[current].tokenType;\n        const params: number[] = [];\n\n        if(paramsCount > 0){\n\n            // Validate the parameters count, and add them to the params list.\n            for(let i= 1; i <= paramsCount; i++){\n                if(!tokens[current + i] || tokens[current + i].tokenType !== 'num'){\n                    error(tokens[current], `Expected number(s) after command ${ tokenType }.`);\n                    current += paramsCount;\n                    return;\n                }\n\n                params.push(Number(tokens[current + i].value));\n            }\n        }\n\n        // validate arc flags ------\n        if(!areArcFlagsValid(tokenType)){\n            error(tokens[current], `Arc flags must be 0 or 1.`);\n            current += paramsCount + 1;\n            return;\n        }\n\n        // validate arc flags ------\n        if(!areArcFlagsValid(tokenType)){\n            error(tokens[current], `Arc flags must be 0 or 1.`);\n            current += paramsCount + 1;\n            return;\n        }\n\n        pathData.commands.push({\n            command: tokens[current].tokenType as EPathDataCommand,\n            params,\n        });\n\n        current += paramsCount + 1;\n\n        if(paramsCount <= 0) return;\n\n        // If the command is followed by multiple sets of coordinates, the subsequent pairs are treated as implicit commands.\n        const nextTokens: IPathDataToken[] = [];\n\n        // Add all 'next params' to the list.\n        while(tokens[current]?.tokenType === 'num'){\n            nextTokens.push(tokens[current]);\n            current++;\n        }\n\n        // Validate next params count.\n        if(nextTokens.length % paramsCount !== 0){\n            error(nextTokens[nextTokens.length - 1], `Expected a number.`);\n            return;\n        }\n\n        const nextCommand = (isRelative ? nextParamsTokenType.toLowerCase() : nextParamsTokenType.toUpperCase()) as EPathDataCommand;\n\n        // Add them to the commands list.\n        for(let i= 0; i < nextTokens.length; i += paramsCount){\n            const nextParams: number[] = [];\n            for(let j = 0; j < paramsCount; j++){\n                nextParams.push(Number(nextTokens[i + j].value));\n            }\n            pathData.commands.push({\n                command: nextCommand,\n                params: nextParams,\n            });\n        }\n    };\n\n    const parseNext = () => {\n        const token = tokens[current];\n\n        const isRelative = token.tokenType.toLowerCase() === token.tokenType;\n\n        switch (token.tokenType){\n            case EPathDataCommand.MoveToAbs:\n            case EPathDataCommand.MoveToRel:\n            case EPathDataCommand.LineToAbs:\n            case EPathDataCommand.LineToRel:{\n                parseCommand(2, EPathDataCommand.LineToAbs, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.ClosePathAbs:\n            case EPathDataCommand.ClosePathRel:{\n                parseCommand(0, EPathDataCommand.LineToAbs, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.LineToHorizontalAbs:\n            case EPathDataCommand.LineToHorizontalRel:\n            case EPathDataCommand.LineToVerticalAbs:\n            case EPathDataCommand.LineToVerticalRel:{\n                parseCommand(1, token.tokenType, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:\n            case EPathDataCommand.CubicCurveToRel:{\n                parseCommand(6, token.tokenType, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothAbs:\n            case EPathDataCommand.CubicCurveToSmoothRel:\n            case EPathDataCommand.QuadraticCurveToAbs:\n            case EPathDataCommand.QuadraticCurveToRel:{\n                parseCommand(4, token.tokenType, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.QuadraticCurveToSmoothAbs:\n            case EPathDataCommand.QuadraticCurveToSmoothRel:{\n                parseCommand(2, token.tokenType, isRelative);\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:\n            case EPathDataCommand.ArcRel:{\n                parseCommand(7, token.tokenType, isRelative);\n                break;\n            }\n\n            default: {\n                error(tokens[current], `Wrong path command.`);\n                current++;\n                break;\n            }\n        }\n    };\n\n    // A path data segment (if there is one) must begin with a \"moveto\" command.\n    parseCommand(2, EPathDataCommand.LineToAbs, tokens[0].tokenType === EPathDataCommand.MoveToRel);\n\n    /**\n     * The loop.\n     */\n    while(!isEnd()){\n        parseNext();\n    }\n\n    return pathData;\n};", "import { EPathDataCommand, IPathData } from './interfaces';\nimport { setDecimalPlaces } from 'mz-math';\n\nconst numberToString = (num: number, decimalPlaces = 2) : string => {\n\n    if(Number.isInteger(num)) return num.toString();\n\n    const _num = setDecimalPlaces(num, decimalPlaces).toString();\n    const parts = _num.split('.');\n    const intPart = parts[0];\n    const decimalPart = parts[1];\n\n    if(intPart === '0') return `.${ decimalPart }`;\n    if(intPart === '-0') return `-.${ decimalPart }`;\n\n    return _num;\n};\n\nconst combineParams = (params: number[], decimalPlaces: number) => {\n    if(!params || params.length <= 0) return '';\n\n    let combined = numberToString(params[0], decimalPlaces);\n\n    for(let i= 1; i<params.length; i++){\n        const param = params[i];\n        const str = numberToString(param, decimalPlaces);\n        if(param < 0){\n            combined +=  str;\n        }\n        else{\n            combined += ` ${ str }`;\n        }\n    }\n\n    return combined;\n};\n\nexport const pathDataMinify = (pathData: IPathData, decimalPlaces = 2) : string => {\n\n    let d = '';\n    let lastCommand: EPathDataCommand|null = null;\n\n    for(const item of pathData.commands){\n\n        // handle cases like 'L80 0' ----> 'H80', 'L0 80' ----> 'V80'\n        if(item.command === EPathDataCommand.LineToAbs){\n            if(item.params[0] === 0){\n                d += `V${ numberToString(item.params[1], decimalPlaces) }`;\n                lastCommand = EPathDataCommand.LineToVerticalAbs;\n                continue;\n            }\n\n            if(item.params[1] === 0){\n                d += `H${ numberToString(item.params[0], decimalPlaces) }`;\n                lastCommand = EPathDataCommand.LineToHorizontalAbs;\n                continue;\n            }\n        }\n\n        // handle cases like 'l80 0' ----> 'h80' & 'l0 80' ----> 'v80'\n        if(item.command === EPathDataCommand.LineToRel){\n            if(item.params[0] === 0){\n                d += `v${ numberToString(item.params[1], decimalPlaces) }`;\n                lastCommand = EPathDataCommand.LineToVerticalRel;\n                continue;\n            }\n\n            if(item.params[1] === 0){\n                d += `h${ numberToString(item.params[0], decimalPlaces) }`;\n                lastCommand = EPathDataCommand.LineToHorizontalRel;\n                continue;\n            }\n        }\n\n        // handle cases like 'c0 0 10 0 10 10' ---> 's10 0 10 10'\n        if(item.command === EPathDataCommand.CubicCurveToRel &&\n            lastCommand?.toLowerCase() !== EPathDataCommand.CubicCurveToAbs.toLowerCase() &&\n            lastCommand?.toLowerCase() !== EPathDataCommand.CubicCurveToSmoothAbs.toLowerCase()){\n            if(item.params[0] === 0 && item.params[1] === 0){\n\n                const params = combineParams([\n                    item.params[2],\n                    item.params[3],\n                    item.params[4],\n                    item.params[5],\n                ], decimalPlaces);\n\n                d += `s${ params }`;\n                lastCommand = EPathDataCommand.CubicCurveToSmoothRel;\n                continue;\n            }\n        }\n\n        const canSkipCommand =\n            (lastCommand === item.command) ||\n            (lastCommand === EPathDataCommand.MoveToAbs && item.command === EPathDataCommand.LineToAbs) ||\n            (lastCommand === EPathDataCommand.MoveToRel && item.command === EPathDataCommand.LineToRel);\n\n        if(canSkipCommand){\n            if(item.params.length > 0 && item.params[0] >= 0){\n                d += ' ';\n            }\n        }\n        else{\n            d += item.command;\n        }\n\n        d += combineParams(item.params, decimalPlaces);\n\n        lastCommand = item.command;\n    }\n\n    return d.trim();\n};\n", "import { EPathDataCommand, IPathData } from './interfaces';\nimport { setDecimalPlaces } from 'mz-math';\nimport { pathDataMinify } from './minify';\n\nexport const pathDataToRelative = (pathData: IPathData): IPathData => {\n\n    const { commands } = pathData;\n\n    if(commands.length <= 0) return pathData;\n\n    // current (x, y) pair\n    let x = commands[0].params[0];\n    let y = commands[0].params[1];\n\n    // the latest 'M' coordinates\n    let mx = x;\n    let my = y;\n\n    // Make first M to be absolute\n    commands[0].command = EPathDataCommand.MoveToAbs;\n\n    for(let i = 1; i<commands.length; i++){\n        const item = commands[i];\n\n        switch (item.command) {\n            case EPathDataCommand.MoveToAbs:{\n                commands[i].params[0] -= x;\n                commands[i].params[1] -= y;\n\n                mx = commands[i].params[0];\n                my = commands[i].params[1];\n                break;\n            }\n\n            case EPathDataCommand.ClosePathAbs:\n            case EPathDataCommand.ClosePathRel:{\n                x = mx;\n                y = my;\n                break;\n            }\n\n            case EPathDataCommand.LineToAbs:\n            case EPathDataCommand.QuadraticCurveToSmoothAbs:{\n                const savedX = commands[i].params[0];\n                const savedY = commands[i].params[1];\n\n                commands[i].params[0] -= x;\n                commands[i].params[1] -= y;\n\n                x = savedX;\n                y = savedY;\n                break;\n            }\n\n            case EPathDataCommand.MoveToRel:\n            case EPathDataCommand.LineToRel:{\n                x += commands[i].params[0];\n                y += commands[i].params[1];\n                break;\n            }\n\n            case EPathDataCommand.LineToHorizontalAbs:{\n                const savedX = commands[i].params[0];\n                commands[i].params[0] -= x;\n                x = savedX;\n                break;\n            }\n\n            case EPathDataCommand.LineToHorizontalRel:{\n                x += commands[i].params[0];\n                break;\n            }\n\n            case EPathDataCommand.LineToVerticalAbs:{\n                const savedY = commands[i].params[0];\n                commands[i].params[0] -= y;\n                y = savedY;\n                break;\n            }\n\n            case EPathDataCommand.LineToVerticalRel:{\n                y += commands[i].params[0];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:{\n                const savedX = commands[i].params[4];\n                const savedY = commands[i].params[5];\n\n                // x1 y1 - control point at the beginning of the curve\n                commands[i].params[0] -= x;\n                commands[i].params[1] -= y;\n\n                // x2 y2 - control point at the end of the curve\n                commands[i].params[2] -= x;\n                commands[i].params[3] -= y;\n\n                // At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the poly-b\u00E9zier.\n                commands[i].params[4] -= x;\n                commands[i].params[5] -= y;\n\n                x = savedX;\n                y = savedY;\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToRel:{\n                x += commands[i].params[4];\n                y += commands[i].params[5];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothAbs:\n            case EPathDataCommand.QuadraticCurveToAbs:{\n                const savedX = commands[i].params[2];\n                const savedY = commands[i].params[3];\n\n                commands[i].params[0] -= x;\n                commands[i].params[1] -= y;\n\n                commands[i].params[2] -= x;\n                commands[i].params[3] -= y;\n\n                x = savedX;\n                y = savedY;\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothRel:\n            case EPathDataCommand.QuadraticCurveToRel:{\n                x += commands[i].params[2];\n                y += commands[i].params[3];\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:{\n                // (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+\n                const savedX = commands[i].params[5];\n                const savedY = commands[i].params[6];\n\n                // x y\n                commands[i].params[5] -= x;\n                commands[i].params[6] -= y;\n\n                x = savedX;\n                y = savedY;\n                break;\n            }\n\n            case EPathDataCommand.ArcRel:{\n                x += commands[i].params[5];\n                y += commands[i].params[6];\n                break;\n            }\n        }\n\n        // make the command lowercase\n        commands[i].command = commands[i].command.toLowerCase() as EPathDataCommand;\n    }\n\n    return pathData;\n};\n\nexport const pathDataToAbsolute = (pathData: IPathData): IPathData => {\n\n    const { commands } = pathData;\n\n    if(commands.length <= 0) return pathData;\n\n    // current (x, y) pair\n    let x = commands[0].params[0];\n    let y = commands[0].params[1];\n\n    // the latest 'M' coordinates\n    let mx = x;\n    let my = y;\n\n    // Make first M to be absolute\n    commands[0].command = EPathDataCommand.MoveToAbs;\n\n    for(let i = 1; i<commands.length; i++){\n        const item = commands[i]\n\n        switch (item.command) {\n            case EPathDataCommand.MoveToRel:{\n                commands[i].params[0] += x;\n                commands[i].params[1] += y;\n\n                mx = commands[i].params[0];\n                my = commands[i].params[1];\n                break;\n            }\n\n            case EPathDataCommand.ClosePathAbs:\n            case EPathDataCommand.ClosePathRel:{\n                x = mx;\n                y = my;\n                break;\n            }\n\n            case EPathDataCommand.LineToRel:\n            case EPathDataCommand.QuadraticCurveToSmoothRel:{\n                const savedX = commands[i].params[0];\n                const savedY = commands[i].params[1];\n\n                commands[i].params[0] += x;\n                commands[i].params[1] += y;\n\n                x += savedX;\n                y += savedY;\n                break;\n            }\n\n            case EPathDataCommand.MoveToAbs:\n            case EPathDataCommand.LineToAbs:{\n                x = commands[i].params[0];\n                y = commands[i].params[1];\n                break;\n            }\n\n            case EPathDataCommand.LineToHorizontalRel:{\n                const savedX = commands[i].params[0];\n                commands[i].params[0] += x;\n                x += savedX;\n                break;\n            }\n\n            case EPathDataCommand.LineToHorizontalAbs:{\n                x = commands[i].params[0];\n                break;\n            }\n\n            case EPathDataCommand.LineToVerticalRel:{\n                const savedY = commands[i].params[0];\n                commands[i].params[0] += y;\n                y += savedY;\n                break;\n            }\n\n            case EPathDataCommand.LineToVerticalAbs:{\n                y = commands[i].params[0];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToRel:{\n                const savedX = commands[i].params[4];\n                const savedY = commands[i].params[5];\n\n                // x1 y1 - control point at the beginning of the curve\n                commands[i].params[0] += x;\n                commands[i].params[1] += y;\n\n                // x2 y2 - control point at the end of the curve\n                commands[i].params[2] += x;\n                commands[i].params[3] += y;\n\n                // At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the poly-b\u00E9zier.\n                commands[i].params[4] += x;\n                commands[i].params[5] += y;\n\n                x += savedX;\n                y += savedY;\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:{\n                x = commands[i].params[4];\n                y = commands[i].params[5];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothRel:\n            case EPathDataCommand.QuadraticCurveToRel:{\n                const savedX = commands[i].params[2];\n                const savedY = commands[i].params[3];\n\n                commands[i].params[0] += x;\n                commands[i].params[1] += y;\n\n                commands[i].params[2] += x;\n                commands[i].params[3] += y;\n\n                x += savedX;\n                y += savedY;\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothAbs:\n            case EPathDataCommand.QuadraticCurveToAbs:{\n                x = commands[i].params[2];\n                y = commands[i].params[3];\n                break;\n            }\n\n            case EPathDataCommand.ArcRel:{\n                // (rx ry x-axis-rotation large-arc-flag sweep-flag x y)+\n                const savedX = commands[i].params[5];\n                const savedY = commands[i].params[6];\n\n                // x y\n                commands[i].params[5] += x;\n                commands[i].params[6] += y;\n\n                x += savedX;\n                y += savedY;\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:{\n                x = commands[i].params[5];\n                y = commands[i].params[6];\n                break;\n            }\n        }\n\n        // make the command uppercase\n        commands[i].command = commands[i].command.toUpperCase() as EPathDataCommand;\n    }\n\n    return pathData;\n};\n\nexport const pathDataToString = (pathData: IPathData, minify?: boolean, decimalPlaces = 2) : string => {\n    if(!pathData || pathData.commands.length <= 0) return '';\n\n    let d = '';\n\n    if(minify){\n        return pathDataMinify(pathData, decimalPlaces);\n    }\n\n    for(const item of pathData.commands){\n        d += item.command;\n        if(item.params.length > 0){\n            d += ` ${ item.params.map(param => Number.isInteger(param) ? param : setDecimalPlaces(param, decimalPlaces)).join(' ')} `\n        }\n        else{\n            d += ' ';\n        }\n    }\n\n    return d.trim();\n};\n\nexport const maximizeAbsolutePath = (pathData: IPathData): IPathData => {\n\n    const { commands } = pathData;\n\n    if(commands.length <= 0) return pathData;\n\n    // Make first M to be absolute\n    commands[0].command = EPathDataCommand.MoveToAbs;\n\n    for(let i = 1; i<commands.length; i++){\n        const item = commands[i];\n\n        switch (item.command) {\n\n            case EPathDataCommand.LineToHorizontalAbs:{\n                // prev should be line abs\n                const prev = commands[i - 1];\n                if(!prev) continue;\n\n                commands[i].command = EPathDataCommand.LineToAbs;\n\n                // update y to be the same as in previous command\n                commands[i].params[1] = prev.params[1];\n                break;\n            }\n\n            case EPathDataCommand.LineToVerticalAbs:{\n                // prev should be line abs\n                const prev = commands[i - 1];\n                if(!prev) continue;\n\n                commands[i].command = EPathDataCommand.LineToAbs;\n                const y = commands[i].params[0];\n\n                // update x to be the same as in previous command\n                commands[i].params[0] = prev.params[0];\n                commands[i].params.push(y);\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToSmoothAbs:{\n                // prev should be Cubic B\u00E9zier Curve Abs (C)\n                const prev = commands[i - 1];\n                if(!prev) continue;\n\n                // Structure for CubicCurveToAbs (C): x1,y1, x2,y2, x,y\n                commands[i].command = EPathDataCommand.CubicCurveToAbs;\n\n                // For S: (x2 y2 x y)\n                // The first control point is assumed to be the reflection\n                // of the second control point on the previous command\n                // relative to the current point.\n                // (If there is no previous command or if the previous command was not an C, c, S or s,\n                // assume the first control point is coincident with the current point.)\n                commands[i].params.unshift(prev.params[3]); // prev y2\n                commands[i].params.unshift(prev.params[2]); // prev x2\n                break;\n            }\n\n            case EPathDataCommand.QuadraticCurveToSmoothAbs:{\n                // prev should be Quadratic B\u00E9zier Curve Abs (Q)\n\n                const prev = commands[i - 1];\n                if(!prev) continue;\n\n                // Structure for CubicCurveToAbs (Q): x1 y1 x y\n                commands[i].command = EPathDataCommand.QuadraticCurveToAbs;\n\n                // For T: (x y)\n                // The control point is assumed to be the reflection of the control point on the previous command relative to the current point.\n                // (If there is no previous command or if the previous command was not a Q, q, T or t,\n                // assume the control point is coincident with the current point.)\n                commands[i].params.unshift(prev.params[1]); // prev y2\n                commands[i].params.unshift(prev.params[0]); // prev x2\n                break;\n            }\n        }\n    }\n\n    return pathData;\n};", "import { IPathData } from './interfaces';\nimport { scan } from './scanner';\nimport { parse } from './parser';\nimport { pathDataToAbsolute, pathDataToRelative, pathDataToString } from './convert';\nimport { pathDataMinify } from './minify';\n\nexport const isPathValid = (d?: string): boolean => {\n    const parsed = parsePath(d);\n    return parsed.errors.length <= 0;\n};\n\n/**\n * https://www.w3.org/TR/SVG11/paths.html#PathData\n * \u2018d\u2019 attribute contains the moveto, line, curve (both cubic and quadratic B\u00E9ziers), arc and closepath instructions.\n */\nexport const parsePath = (d?: string): IPathData => {\n    const scanResult = scan(d);\n    return parse(scanResult);\n};\n\n/**\n * Converts all path commands to relative.\n */\nexport const pathToRel = (d?: string, beautify = false, decimalPlaces = 2): string|undefined => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    return pathDataToString(pathDataToRelative(parsed), !beautify, decimalPlaces);\n};\n\n/**\n * Converts all path commands to absolute.\n */\nexport const pathToAbs = (d?: string, beautify = false, decimalPlaces = 2): string|undefined => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    return pathDataToString(pathDataToAbsolute(parsed), !beautify, decimalPlaces);\n};\n\nexport const minifyPath = (d?: string, decimalPlaces = 2): string|undefined => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    return pathDataMinify(parsed, decimalPlaces);\n};\n\nexport const beautifyPath = (d?: string, decimalPlaces = 2): string|undefined => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    return pathDataToString(parsed, false, decimalPlaces);\n};\n", "import { createPath } from './primitive-shapes';\nimport { DEFAULT_DECIMAL_PLACES } from '../core';\nimport { setDecimalPlaces } from 'mz-math';\nimport { IPrimitiveShapeProps } from '../../interfaces';\nimport { pathToRel } from '../path';\n\nexport interface ICreateStarProps extends IPrimitiveShapeProps{\n    raysNumber: number;\n    centerX: number;\n    centerY: number;\n    outerRadius: number;\n    innerRadius: number;\n    decimalPlaces?: number;\n    pathLength?: string|number;\n    type?: number;\n}\n\nexport const createStar = (props: ICreateStarProps) : SVGPathElement => {\n\n    switch (props.type){\n        case 2: {\n            return createStar2(props);\n        }\n        case 3: {\n            return createStar3(props);\n        }\n    }\n\n    return createStar1(props);\n};\n\nexport const createStar1 = (props: ICreateStarProps) : SVGPathElement => {\n\n    const {\n        centerX, centerY,\n        outerRadius, innerRadius,\n    } = props;\n\n    const MIN_RAYS_NUMBER = 3;\n    const dots: [number, number][] = [];\n\n    const raysNumber = Math.max(MIN_RAYS_NUMBER, Number(props.raysNumber) || MIN_RAYS_NUMBER);\n    const decimalPlaces = (props.decimalPlaces === null || props.decimalPlaces === undefined) ? DEFAULT_DECIMAL_PLACES : props.decimalPlaces;\n\n    const angleDiff = 2 * Math.PI / raysNumber;\n    const halfAngle = angleDiff / 2;\n\n    for(let i= 0, angle= 1.5 * Math.PI; i<raysNumber; i++, angle += angleDiff){\n        // outer circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle) * outerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle) * outerRadius, decimalPlaces),\n        ]);\n\n        // inner circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle + halfAngle) * innerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle + halfAngle) * innerRadius, decimalPlaces),\n        ]);\n    }\n\n    let d = `M ${ dots[0][0] } ${ dots[0][1] } `;\n    d += dots.map(dot => `L ${ dot[0] } ${ dot[1] }`).join(' ');\n    d += 'Z';\n    d = pathToRel(d) || d;\n\n    const pathProps = {\n        ...props,\n        d,\n    };\n\n    return createPath(pathProps);\n};\n\nexport const createStar2 = (props: ICreateStarProps) : SVGPathElement => {\n\n    const {\n        centerX, centerY,\n        outerRadius, innerRadius,\n    } = props;\n\n    const MIN_RAYS_NUMBER = 3;\n    const dots: [number, number][] = [];\n\n    const raysNumber = Math.max(MIN_RAYS_NUMBER, Number(props.raysNumber) || MIN_RAYS_NUMBER);\n    const decimalPlaces = (props.decimalPlaces === null || props.decimalPlaces === undefined) ? DEFAULT_DECIMAL_PLACES : props.decimalPlaces;\n\n    const angleDiff = 2 * Math.PI / raysNumber;\n    const halfAngle = angleDiff / 2;\n\n    for(let i= 0, angle= 1.5 * Math.PI; i<=raysNumber; i++, angle += angleDiff){\n\n        // inner circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle) * innerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle) * innerRadius, decimalPlaces),\n        ]);\n\n        // outer circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle + halfAngle) * outerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle + halfAngle) * outerRadius, decimalPlaces),\n        ]);\n    }\n\n    let d = `M ${ dots[0][0] } ${ dots[0][1] } `;\n\n    for(let i = 0; i < dots.length; i += 2){\n        const dot1 = dots[i];\n        const dot2 = dots[i + 1];\n        d += `S${ dot1[0] } ${ dot1[1] } ${ dot2[0] } ${ dot2[1] }`;\n    }\n\n    d += 'Z';\n    d = pathToRel(d) || d;\n\n    const pathProps = {\n        ...props,\n        d,\n    };\n\n    return createPath(pathProps);\n};\n\nexport const createStar3 = (props: ICreateStarProps) : SVGPathElement => {\n\n    const {\n        centerX, centerY,\n        outerRadius, innerRadius,\n    } = props;\n\n    const MIN_RAYS_NUMBER = 3;\n    const dots: [number, number][] = [];\n\n    const raysNumber = Math.max(MIN_RAYS_NUMBER, Number(props.raysNumber) || MIN_RAYS_NUMBER);\n    const decimalPlaces = (props.decimalPlaces === null || props.decimalPlaces === undefined) ? DEFAULT_DECIMAL_PLACES : props.decimalPlaces;\n\n    const angleDiff = 2 * Math.PI / raysNumber;\n    const halfAngle = angleDiff / 2;\n\n    for(let i= 0, angle= 1.5 * Math.PI; i<=raysNumber; i++, angle += angleDiff){\n\n        // inner circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle) * innerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle) * innerRadius, decimalPlaces),\n        ]);\n\n        // outer circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle + halfAngle) * outerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle + halfAngle) * outerRadius, decimalPlaces),\n        ]);\n    }\n\n    let d = `M ${ dots[0][0] } ${ dots[0][1] } `;\n\n    for(let i = 0; i < dots.length; i += 2){\n        const dot1 = dots[i];\n        const dot2 = dots[i + 1];\n        d += `S${ dot1[0] } ${ dot1[1] } ${ dot2[0] } ${ dot2[1] } L ${ dot2[0] } ${ dot2[1] }`;\n    }\n\n    d += 'Z';\n    d = pathToRel(d) || d;\n\n    const pathProps = {\n        ...props,\n        d,\n    };\n\n    return createPath(pathProps);\n};", "import { createPath } from './primitive-shapes';\nimport { DEFAULT_DECIMAL_PLACES } from '../core';\nimport { setDecimalPlaces } from 'mz-math';\nimport { IPrimitiveShapeProps } from '../../interfaces';\nimport { pathToRel } from '../path';\nimport { mod } from 'mz-math';\n\nexport interface ICreateFlowerProps extends IPrimitiveShapeProps{\n    petalsNumber: number;\n    centerX: number;\n    centerY: number;\n    outerRadius: number;\n    innerRadius: number;\n    decimalPlaces?: number;\n    pathLength?: string|number;\n}\n\nexport const createFlower = (props: ICreateFlowerProps) : SVGPathElement => {\n\n    const {\n        centerX, centerY,\n        outerRadius, innerRadius,\n    } = props;\n\n    const MIN_PETALS_NUMBER = 3;\n    const dots: [number, number][] = [];\n\n    const petalsNumber = Math.max(MIN_PETALS_NUMBER, Number(props.petalsNumber) || MIN_PETALS_NUMBER);\n    const decimalPlaces = (props.decimalPlaces === null || props.decimalPlaces === undefined) ? DEFAULT_DECIMAL_PLACES : props.decimalPlaces;\n\n    const angleDiff = 2 * Math.PI / petalsNumber;\n\n    for(let i= 0, angle= 1.5 * Math.PI; i<petalsNumber; i++, angle += angleDiff){\n\n        // inner circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle) * innerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle) * innerRadius, decimalPlaces),\n        ]);\n\n        // outer circle\n        dots.push([\n            setDecimalPlaces(centerX + Math.cos(angle) * outerRadius, decimalPlaces),\n            setDecimalPlaces(centerY + Math.sin(angle) * outerRadius, decimalPlaces),\n        ]);\n    }\n\n    let d = `M ${ dots[0][0] } ${ dots[0][1] } `;\n\n    for(let i= 0; i < dots.length; i += 2){\n        const outerDot = dots[mod(i + 1, dots.length)];\n        const innerDot2 = dots[mod(i + 2, dots.length)];\n        const outerDot2 = dots[mod(i + 3, dots.length)];\n\n        d += `C ${ outerDot[0] } ${ outerDot[1] } ${ outerDot2[0] } ${ outerDot2[1] } ${ innerDot2[0] } ${ innerDot2[1] } `;\n    }\n\n    d += 'Z';\n    d = pathToRel(d) || d;\n\n    const pathProps = {\n        ...props,\n        d,\n    };\n\n    return createPath(pathProps);\n};", "import { createPath } from './primitive-shapes';\nimport { IPrimitiveShapeProps } from '../../interfaces';\n\nexport const getRectPathD = (props: {\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    rx?: number,\n    ry?: number,\n}) => {\n    const {\n        x, y,\n        width, height,\n        rx: _rx,\n        ry: _ry,\n    } = props;\n\n    const rx = _rx || 0;\n    const ry = _ry || 0;\n\n    if (rx || ry){\n\n        const w = width - 2 * rx;\n        const h = height - 2 * ry;\n\n        return `M${ x + rx } ${ y }h${ w }s${ rx } 0 ${ rx } ${ ry }v${ h }s0 ${ ry } ${ -rx } ${ ry }h${ -w }s${ -rx } 0 ${ -rx } ${ -ry }v${ -h }s0 ${ -ry } ${ rx } ${ -ry }z`;\n    }\n\n    return `M${ x } ${ y }h${ width }v${ height }h${ -width }z`;\n};\n\nexport interface ICreateRectPathProps extends IPrimitiveShapeProps{\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    rx?: number;\n    ry?: number;\n}\n\nexport const createRectPath = (props: ICreateRectPathProps) : SVGPathElement => {\n\n    const pathProps = {\n        ...props,\n        d: getRectPathD({\n            x: props.x,\n            y: props.y,\n            width: props.width,\n            height: props.height,\n            rx: props.rx,\n            ry: props.ry,\n        }),\n    };\n\n    return createPath(pathProps);\n};", "import { createSVGFromString, getSVGAsString } from './core';\n\nconst MISSING_SVG_ERR = 'Either an SVG element or an SVG string must be provided.';\n\nconst formatExt = (ext?: string) : string => {\n    if(!ext || !ext.trim()) return 'svg';\n\n    return ext.trim().toLowerCase();\n};\n\n/**\n * Download file in browser environment.\n */\nexport const download = (props: {\n    $svg?: SVGSVGElement,\n    svgString?: string;\n    outfileName?: string;\n    ext?: string; // svg, png, jpg, jpeg\n}) => {\n    return new Promise<{\n        isError: boolean;\n        msg?: string;\n    }>((resolve, reject) => {\n        if(!props.$svg && !props.svgString){\n            reject({\n                isError: true,\n                msg: MISSING_SVG_ERR,\n            });\n            return;\n        }\n\n        const _svgString = props.$svg ? getSVGAsString(props.$svg) : props.svgString;\n        const svgString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${ _svgString }`;\n\n        const formattedExt = formatExt(props.ext);\n        const formattedFileName = `${ props.outfileName || 'out'}.${ formattedExt }`;\n\n        if(formattedExt === 'svg'){\n\n            const blob = new Blob([svgString], {type : 'text/plain'});\n            const url = URL.createObjectURL(blob);\n\n            const link = document.createElement('a');\n            link.href = url;\n            link.title = '';\n            link.download = formattedFileName;\n            link.click();\n\n            URL.revokeObjectURL(url);\n            resolve({\n                isError: false,\n            });\n        }\n        else{\n            const $svg = props.$svg || createSVGFromString({\n                svg: props.svgString || '',\n            });\n\n            const $canvas = document.createElement('canvas');\n            $canvas.width = $svg.width.baseVal.value;\n            $canvas.height = $svg.height.baseVal.value;\n\n            const ctx = $canvas.getContext('2d');\n            if(!ctx){\n                reject({\n                    isError: true,\n                });\n                return;\n            }\n\n            const data = (new XMLSerializer()).serializeToString($svg);\n            const blob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});\n            const url = URL.createObjectURL(blob);\n\n            const $img = new Image();\n            $img.onload = () => {\n                ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n                ctx.drawImage($img, 0, 0);\n\n                URL.revokeObjectURL(url);\n\n                $canvas.toBlob(cBlob => {\n\n                    if(!cBlob){\n                        resolve({\n                            isError: true,\n                        });\n                        return;\n                    }\n\n                    const cUrl = URL.createObjectURL(cBlob);\n                    const link = document.createElement('a');\n                    link.href = cUrl;\n                    link.title = '';\n                    link.download = formattedFileName;\n                    link.click();\n\n                    URL.revokeObjectURL(cUrl);\n\n                    resolve({\n                        isError: false,\n                    });\n                });\n            };\n\n            $img.onerror = () => {\n                resolve({\n                    isError: true,\n                });\n            };\n\n            $img.src = url;\n        }\n    });\n};", "import { getCommonAttributes, setAttributes, SVG_NAMESPACE } from './core';\nimport { IPrimitiveShapeProps } from '../interfaces';\n\nexport interface ICreateGroupProps extends IPrimitiveShapeProps{\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n}\n\nexport const createGroup = (props?: ICreateGroupProps) : SVGGElement => {\n    const doc = props?.document || window.document;\n    const $g = doc.createElementNS(SVG_NAMESPACE, 'g');\n\n    setAttributes($g, [\n        ...getCommonAttributes(props),\n    ]);\n\n    return $g;\n};\n\nexport const createDefs = (props?: {\n    document?: Document;\n    id?: string;\n    classes?: string;\n}) : SVGDefsElement => {\n    const doc = props?.document || window.document;\n    const $defs = doc.createElementNS(SVG_NAMESPACE, 'defs');\n\n    setAttributes($defs, [\n        ['id', props?.id],\n        ['class', props?.classes],\n    ]);\n\n    return $defs;\n};\n\nexport interface ICreateUseProps extends IPrimitiveShapeProps{\n    href?: string;\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n}\n\nexport const createUse = (props?: ICreateUseProps) : SVGUseElement => {\n\n    const doc = props?.document || window.document;\n    const $use = doc.createElementNS(SVG_NAMESPACE, 'use');\n\n    setAttributes($use, [\n        ['href', props?.href],\n        ['x', props?.x],\n        ['y', props?.y],\n        ['width', props?.width],\n        ['height', props?.height],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $use;\n};\n\nexport interface ICreatePatternProps extends IPrimitiveShapeProps{\n    x?: string|number;\n    y?: string|number;\n    width?: string|number;\n    height?: string|number;\n\n    href?: string;\n    patternContentUnits?: string|number;\n    patternTransform?: string;\n    patternUnits?: string;\n    preserveAspectRatio?: string;\n    viewBox?: string;\n}\n\nexport const createPattern = (props?: ICreatePatternProps) : SVGPatternElement => {\n    const doc = props?.document || window.document;\n    const $pattern = doc.createElementNS(SVG_NAMESPACE, 'pattern');\n\n    setAttributes($pattern, [\n        ['x', props?.x],\n        ['y', props?.y],\n        ['width', props?.width],\n        ['height', props?.height],\n\n        ['href', props?.href],\n        ['patternContentUnits', props?.patternContentUnits],\n        ['patternTransform', props?.patternTransform],\n        ['patternUnits', props?.patternUnits],\n        ['preserveAspectRatio', props?.preserveAspectRatio],\n        ['viewBox', props?.viewBox],\n\n        ...getCommonAttributes(props),\n    ]);\n\n    return $pattern;\n};\n\nexport interface ICreateClipPathProps extends IPrimitiveShapeProps{\n    clipPathUnits?: string;\n}\n\nexport const createClipPath = (props?: ICreateClipPathProps) : SVGClipPathElement => {\n\n    const doc = props?.document || window.document;\n    const $clipPath = doc.createElementNS(SVG_NAMESPACE, 'clipPath');\n\n    setAttributes($clipPath, [\n        ['clipPathUnits', props?.clipPathUnits],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $clipPath;\n};\n\nexport interface ICreateMaskProps extends IPrimitiveShapeProps{\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n    maskContentUnits?: string;\n    maskUnits?: string;\n}\n\nexport const createMask = (props?: ICreateMaskProps) : SVGMaskElement => {\n\n    const doc = props?.document || window.document;\n    const $mask = doc.createElementNS(SVG_NAMESPACE, 'mask');\n\n    setAttributes($mask, [\n        ['x', props?.x],\n        ['y', props?.y],\n        ['width', props?.width],\n        ['height', props?.height],\n        ['maskContentUnits', props?.maskContentUnits],\n        ['maskUnits', props?.maskUnits],\n        ...getCommonAttributes(props),\n    ]);\n\n    return $mask;\n};\n\nexport interface ICreateSymbolProps extends IPrimitiveShapeProps{\n    x?: number|string;\n    y?: number|string;\n    width?: number|string;\n    height?: number|string;\n    preserveAspectRatio?: string;\n    refX?: number|string;\n    refY?: number|string;\n    viewBox?: string;\n}\n\nexport const createSymbol = (props?: ICreateSymbolProps) : SVGSymbolElement => {\n\n    const doc = props?.document || window.document;\n    const $symbol = doc.createElementNS(SVG_NAMESPACE, 'symbol');\n\n    setAttributes($symbol, [\n        ['x', props?.x],\n        ['y', props?.y],\n        ['width', props?.width],\n        ['height', props?.height],\n\n        ['preserveAspectRatio', props?.preserveAspectRatio],\n        ['refX', props?.refX],\n        ['refY', props?.refY],\n        ['viewBox', props?.viewBox],\n\n        ...getCommonAttributes(props),\n    ]);\n\n    return $symbol;\n};", "export const appendOnce = ($parent: SVGSVGElement|SVGElement, $el: SVGElement) => {\n    const tagName = $el.tagName.toLowerCase().trim();\n    if($parent.querySelector(tagName)) return;\n\n    $parent.append($el);\n};\n\nexport const prependOnce = ($parent: SVGSVGElement|SVGElement, $el: SVGElement) => {\n    const tagName = $el.tagName.toLowerCase().trim();\n    if($parent.querySelector(tagName)) return;\n\n    $parent.prepend($el);\n};", "import { parsePath } from './index';\nimport { maximizeAbsolutePath, pathDataToAbsolute } from './convert';\nimport { EPathDataCommand } from './interfaces';\nimport {\n    degreesToRadians,\n    Matrix2, mMulVector,\n    setDecimalPlaces,\n    v2CubicBezierBBox, v2MulScalar,\n    v2QuadraticBezierBBox, v2Sum,\n    Vector2\n} from 'mz-math';\n\nexport interface IBBox {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    x2: number;\n    y2: number;\n}\n\n/**\n * https://www.w3.org/TR/SVG11/implnote.html#ArcConversionEndpointToCenter\n */\nexport const getSVGArcCenter = (\n    startX: number,\n    startY: number,\n    rx: number,\n    ry: number,\n    angleRad: number,\n    largeArcFlag: number,\n    sweepFlag: number,\n    endX: number,\n    endY: number\n) : Vector2 | null => {\n    // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n\n    // F.6.5: Step 1 ---------------------------------------\n    const cos = Math.cos(angleRad);\n    const sin = Math.sin(angleRad);\n\n    const rotationMatrix: Matrix2 = [\n        [cos, -sin],\n        [sin, cos],\n    ];\n    const posVector1: Vector2 = [\n        (startX - endX) / 2,\n        (startY - endY) / 2,\n    ];\n\n    // Compute (x1\u2032, y1\u2032)\n    const posVector2 = mMulVector(rotationMatrix, posVector1);\n\n    // F.6.5: Step 2 ---------------------------------------\n    const rx2 = rx ** 2;\n    const ry2 = ry ** 2;\n    const posx2 = posVector2[0] ** 2;\n    const posy2 = posVector2[1] ** 2;\n\n    const t1 = rx2 * ry2 - rx2 * posy2 - ry2 * posx2;\n    const t2 = rx2 * posy2 + ry2 * posx2;\n    if(t2 === 0) return null;\n\n    const t3 = t1 / t2;\n    if(t3 < 0) return null;\n\n    let t4 = Math.sqrt(t3);\n\n    const posVector3: Vector2 = [\n        rx * posVector2[1] / ry,\n        -ry *  posVector2[0] / rx,\n    ];\n\n    if(largeArcFlag === sweepFlag){\n        t4 = -t4;\n    }\n\n    const centerVector1: Vector2 = v2MulScalar(posVector3, t4);\n\n    // F.6.5: Step 3 ---------------------------------------\n    const rotationMatrix2: Matrix2 = [\n        [cos, sin],\n        [-sin, cos],\n    ];\n\n    const centerVector2: Vector2 = mMulVector(rotationMatrix2, centerVector1) as Vector2;\n    const posVector4: Vector2 = [\n        (startX + endX) / 2,\n        (startY + endY) / 2,\n    ];\n\n    return v2Sum(centerVector2, posVector4);\n};\n\nconst getAngle = (bx: number, by: number): number => {\n    const PI2 = 2 * Math.PI;\n    const t1 = by > 0 ? 1 : -1;\n    return ((PI2 + t1 * Math.acos(bx / Math.sqrt(bx * bx + by * by))) % PI2);\n};\n\nconst formatBBox = (xmin: number, xmax: number, ymin: number, ymax: number) : IBBox => {\n    return {\n        x: xmin,\n        y: ymin,\n        w: Math.abs(ymax - ymin),\n        h: Math.abs(xmax - xmin),\n        x2: xmax,\n        y2: ymax,\n    };\n};\n\nconst getArcBoundingBox = (\n    x1: number, y1: number,\n    rx: number, ry: number,\n    angleRad: number, largeArc: boolean,\n    sweep: boolean,\n    x2: number, y2: number\n) : IBBox => {\n\n    let xmin, xmax, ymin, ymax;\n\n    /*const center = getSVGArcCenter(\n        x1,\n        y1,\n        rx,\n        ry,\n        angleRad,\nlargeArc ? 1 : 0,\nsweep ? 1 : 0,\n        x2,\n        y2\n    );\n    if(!center) return formatBBox(0, 0, 0, 0);\n\n    const cx = center[0];\n    const cy = center[1];\n    */\n\n    if (rx < 0) {\n        rx *= -1;\n    }\n\n    if (ry < 0) {\n        ry *= -1;\n    }\n\n    if (rx === 0 || ry === 0) {\n        xmin = x1 < x2 ? x1 : x2;\n        xmax = x1 > x2 ? x1 : x2;\n        ymin = y1 < y2 ? y1 : y2;\n        ymax = y1 > y2 ? y1 : y2;\n\n        return formatBBox(xmin, xmax, ymin, ymax);\n    }\n\n    const x1prime: number = Math.cos(angleRad) * (x1 - x2) / 2 + Math.sin(angleRad) * (y1 - y2) / 2;\n    const y1prime: number = -Math.sin(angleRad) * (x1 - x2) / 2 + Math.cos(angleRad) * (y1 - y2) / 2;\n\n    let radicant: number = (rx * rx * ry * ry - rx * rx * y1prime * y1prime - ry * ry * x1prime * x1prime);\n    radicant /= (rx * rx * y1prime * y1prime + ry * ry * x1prime * x1prime);\n\n    let cxPrime = 0;\n    let cyPrime = 0;\n\n    if (radicant < 0) {\n        const ratio: number = rx / ry;\n        radicant = y1prime * y1prime + x1prime * x1prime / (ratio * ratio);\n        if (radicant < 0) {\n            xmin = (x1 < x2 ? x1 : x2);\n            xmax = (x1 > x2 ? x1 : x2);\n            ymin = (y1 < y2 ? y1 : y2);\n            ymax = (y1 > y2 ? y1 : y2);\n\n            return formatBBox(xmin, xmax, ymin, ymax);\n        }\n        ry = Math.sqrt(radicant);\n        rx = ratio * ry;\n    }\n    else {\n        const factor = (largeArc == sweep ? -1 : 1) * Math.sqrt(radicant);\n        cxPrime = factor * rx * y1prime / ry;\n        cyPrime = -factor * ry * x1prime / rx;\n    }\n\n    const cx = cxPrime * Math.cos(angleRad) - cyPrime * Math.sin(angleRad) + (x1 + x2) / 2;\n    const cy = cxPrime * Math.sin(angleRad) + cyPrime * Math.cos(angleRad) + (y1 + y2) / 2;\n\n\n\n    let txMin: number, txMax: number, tyMin: number, tyMax: number;\n\n    if (angleRad === 0 || angleRad === Math.PI) {\n        xmin = cx - rx;\n        txMin = getAngle(-rx, 0);\n        xmax = cx + rx;\n        txMax = getAngle(rx, 0);\n        ymin = cy - ry;\n        tyMin = getAngle(0, -ry);\n        ymax = cy + ry;\n        tyMax = getAngle(0, ry);\n    }\n    else if (angleRad === Math.PI / 2 || angleRad === 3.0 * Math.PI / 2) {\n        xmin = cx - ry;\n        txMin = getAngle(-ry, 0);\n        xmax = cx + ry;\n        txMax = getAngle(ry, 0);\n        ymin = cy - rx;\n        tyMin = getAngle(0, -rx);\n        ymax = cy + rx;\n        tyMax = getAngle(0, rx);\n    }\n    else {\n        txMin = -Math.atan(ry * Math.tan(angleRad) / rx);\n        txMax = Math.PI - Math.atan(ry * Math.tan(angleRad) / rx);\n\n        xmin = cx + rx * Math.cos(txMax) * Math.cos(angleRad) - ry * Math.sin(txMin) * Math.sin(angleRad);\n        xmax = cx + rx * Math.cos(txMax) * Math.cos(angleRad) - ry * Math.sin(txMax) * Math.sin(angleRad);\n\n        // swap ------------------------\n        if (xmin > xmax) {\n            [xmin, xmax] = [xmax, xmin];\n            [txMin, txMax] = [txMax, txMin];\n        }\n\n        let tmpY = cy + rx * Math.cos(txMin) * Math.sin(angleRad) + ry * Math.sin(txMin) * Math.cos(angleRad);\n        txMin = getAngle(xmin - cx, tmpY - cy);\n        tmpY = cy + rx * Math.cos(txMax) * Math.sin(angleRad) + ry * Math.sin(txMax) * Math.cos(angleRad);\n        txMax = getAngle(xmax - cx, tmpY - cy);\n\n        tyMin = Math.atan(ry / (Math.tan(angleRad) * rx));\n        tyMax = Math.atan(ry / (Math.tan(angleRad) * rx)) + Math.PI;\n        ymin = cy + rx * Math.cos(tyMin) * Math.sin(angleRad) + ry * Math.sin(tyMin) * Math.cos(angleRad);\n        ymax = cy + rx * Math.cos(tyMax) * Math.sin(angleRad) + ry * Math.sin(tyMax) * Math.cos(angleRad);\n\n        // swap ------------------------\n        if (ymin > ymax) {\n            [ymin, ymax] = [ymax, ymin];\n            [tyMin, tyMax] = [tyMax, tyMin];\n        }\n\n        let tmpX = cx + rx * Math.cos(tyMin) * Math.cos(angleRad) - ry * Math.sin(tyMin) * Math.sin(angleRad);\n        tyMin = getAngle(tmpX - cx, ymin - cy);\n        tmpX = cx + rx * Math.cos(tyMax) * Math.cos(angleRad) - ry * Math.sin(tyMax) * Math.sin(angleRad);\n        tyMax = getAngle(tmpX - cx, ymax - cy);\n    }\n\n    let angle1 = getAngle(x1 - cx, y1 - cy);\n    let angle2 = getAngle(x2 - cx, y2 - cy);\n\n    if (!sweep){\n        [angle1, angle2] = [angle2, angle1];\n    }\n\n    let otherArc = false;\n\n    if (angle1 > angle2) {\n        // swap ------------------------\n        [angle1, angle2] = [angle2, angle1];\n        otherArc = true;\n    }\n\n    if ((!otherArc && (angle1 > txMin || angle2 < txMin)) || (otherArc && !(angle1 > txMin || angle2 < txMin))) {\n        xmin = Math.min(x1, x2);\n    }\n\n    if ((!otherArc && (angle1 > txMax || angle2 < txMax)) || (otherArc && !(angle1 > txMax || angle2 < txMax))) {\n        xmax = Math.max(x1, x2);\n    }\n\n    if ((!otherArc && (angle1 > tyMin || angle2 < tyMin)) || (otherArc && !(angle1 > tyMin || angle2 < tyMin))) {\n        ymin = Math.min(y1, y2);\n    }\n\n    if ((!otherArc && (angle1 > tyMax || angle2 < tyMax)) || (otherArc && !(angle1 > tyMax || angle2 < tyMax))) {\n        ymax = Math.max(y1, y2);\n    }\n\n    return formatBBox(xmin, xmax, ymin, ymax);\n}\n\n/**\n * Determine the coordinates of the smallest rectangle in which the path fits.\n */\nexport const getPathBBox = (d?: string, decimalPlaces = 2) : IBBox|null => {\n    if(!d || d.trim() === '') return null;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return null;\n\n    const abs = pathDataToAbsolute(parsed);\n    if(!abs || abs.commands.length <= 0) return null;\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    const max = maximizeAbsolutePath(abs);\n\n    // current (x, y) pair\n    let x = max.commands[0].params[0];\n    let y = max.commands[0].params[1];\n\n    // the latest 'M' coordinates\n    let mx = x;\n    let my = y;\n\n    for(const item of max.commands) {\n\n        switch (item.command){\n            case EPathDataCommand.MoveToAbs: {\n                minX = Math.min(minX, item.params[0]);\n                minY = Math.min(minY, item.params[1]);\n\n                maxX = Math.max(maxX, item.params[0]);\n                maxY = Math.max(maxY, item.params[1]);\n\n                mx = item.params[0];\n                my = item.params[1];\n                break;\n            }\n\n            case EPathDataCommand.ClosePathAbs:{\n                x = mx;\n                y = my;\n                break;\n            }\n\n            case EPathDataCommand.LineToAbs:{\n                minX = Math.min(minX, item.params[0]);\n                minY = Math.min(minY, item.params[1]);\n\n                maxX = Math.max(maxX, item.params[0]);\n                maxY = Math.max(maxY, item.params[1]);\n\n                x = item.params[0];\n                y = item.params[1];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:{\n                const startControlPoint: Vector2 = [x, y];\n                const centerControlPoint1: Vector2 = [item.params[0], item.params[1]];\n                const centerControlPoint2: Vector2 = [item.params[2], item.params[3]];\n                const endControlPoint: Vector2 = [item.params[4], item.params[5]];\n                const bbox = v2CubicBezierBBox(startControlPoint, centerControlPoint1, centerControlPoint2, endControlPoint);\n\n                minX = Math.min(minX, bbox.x);\n                minY = Math.min(minY, bbox.y);\n\n                maxX = Math.max(maxX, bbox.x2);\n                maxY = Math.max(maxY, bbox.y2);\n\n                x = item.params[4];\n                y = item.params[5];\n                break;\n            }\n\n            case EPathDataCommand.QuadraticCurveToAbs:{\n                const startControlPoint: Vector2 = [x, y];\n                const centerControlPoint: Vector2 = [item.params[0], item.params[1]];\n                const endControlPoint: Vector2 = [item.params[2], item.params[3]];\n\n                const bbox = v2QuadraticBezierBBox(startControlPoint, centerControlPoint, endControlPoint);\n\n                minX = Math.min(minX, bbox.x);\n                minY = Math.min(minY, bbox.y);\n\n                maxX = Math.max(maxX, bbox.x2);\n                maxY = Math.max(maxY, bbox.y2);\n\n                x = item.params[2];\n                y = item.params[3];\n\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:{\n                // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                const rx = item.params[0];\n                const ry = item.params[1];\n                const angleDeg = item.params[2];\n                const largeArcFlag = item.params[3];\n                const sweepFlag = item.params[4];\n                const endX = item.params[5];\n                const endY = item.params[6];\n\n                //const arcCenter = getSVGArcCenter(x, y, rx, ry, angleDeg, largeArcFlag, sweepFlag, endX, endY);\n                //console.log('arcCenter', arcCenter)\n\n                const bbox = getArcBoundingBox(x, y, rx, ry, degreesToRadians(angleDeg), largeArcFlag === 1, sweepFlag === 1, endX, endY);\n\n                minX = Math.min(minX, bbox?.x ?? 0);\n                minY = Math.min(minY, bbox?.y ?? 0);\n\n                maxX = Math.max(maxX, bbox?.x2 ?? 0);\n                maxY = Math.max(maxY, bbox?.y2 ?? 0);\n\n                x = item.params[5];\n                y = item.params[6];\n                break;\n            }\n        }\n    }\n\n    return {\n        x: setDecimalPlaces(minX, decimalPlaces),\n        y: setDecimalPlaces(minY, decimalPlaces),\n        w: setDecimalPlaces(Math.abs(maxX - minX), decimalPlaces),\n        h: setDecimalPlaces(Math.abs(maxY - minY), decimalPlaces),\n        x2: setDecimalPlaces(maxX, decimalPlaces),\n        y2: setDecimalPlaces(maxY, decimalPlaces),\n    };\n};", "import { parsePath } from './index';\nimport { maximizeAbsolutePath, pathDataToAbsolute, pathDataToRelative, pathDataToString } from './convert';\nimport { Vector3, m2RotateAroundPointH, degreesToRadians, Vector2, m2ScaleAtPointH } from 'mz-math';\nimport { EPathDataCommand } from './interfaces';\nimport { getPathBBox } from './bbox';\n\n// ---------------------- TRANSLATE ----------------------\n\nexport const translatePath = (d: string, x: number, y: number, decimalPlaces = 2) => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    const relative = pathDataToRelative(parsed);\n    if(!relative || relative.commands.length <= 0) return d;\n\n    const mCommand = relative.commands[0];\n    mCommand.params[0] = x;\n    mCommand.params[1] = y;\n\n    return pathDataToString(relative, true, decimalPlaces);\n};\n\n// ---------------------- ROTATE -------------------------\n\nconst rotateDot = (point: Vector2, transformOrigin: Vector2, angleRad: number, decimalPlaces = 2) => {\n    return m2RotateAroundPointH(\n        angleRad,\n        [transformOrigin[0], transformOrigin[1], 1],\n        [point[0], point[1], 1],\n        true,\n        decimalPlaces\n    );\n};\n\nexport const rotatePathAroundPoint = (d: string, transformOrigin: Vector2, angleDegrees: number, decimalPlaces = 2) => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    const abs = pathDataToAbsolute(parsed);\n    if(!abs || abs.commands.length <= 0) return d;\n\n    const angleRad = degreesToRadians(angleDegrees, decimalPlaces);\n\n    const max = maximizeAbsolutePath(abs);\n    for(const item of max.commands){\n\n        switch(item.command){\n\n            case EPathDataCommand.MoveToAbs:\n            case EPathDataCommand.LineToAbs:{\n                // 2 params (x, y)\n\n                // get the new position after rotation\n                const pos: Vector3 = rotateDot([item.params[0], item.params[1]], transformOrigin, angleRad, decimalPlaces);\n                item.params[0] = pos[0];\n                item.params[1] = pos[1];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:{\n                // 6 parameters\n                const pos1: Vector3 = rotateDot([item.params[0], item.params[1]], transformOrigin, angleRad, decimalPlaces);\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];\n\n                const pos2: Vector3 = rotateDot([item.params[2], item.params[3]], transformOrigin, angleRad, decimalPlaces);\n                item.params[2] = pos2[0];\n                item.params[3] = pos2[1];\n\n                const pos3: Vector3 = rotateDot([item.params[4], item.params[5]], transformOrigin, angleRad, decimalPlaces);\n                item.params[4] = pos3[0];\n                item.params[5] = pos3[1];\n                break;\n            }\n\n            case EPathDataCommand.QuadraticCurveToAbs:{\n                // 4 parameters\n                const pos1: Vector3 = rotateDot([item.params[0], item.params[1]], transformOrigin, angleRad, decimalPlaces);\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];\n\n                const pos2: Vector3 = rotateDot([item.params[2], item.params[3]], transformOrigin, angleRad, decimalPlaces);\n                item.params[2] = pos2[0];\n                item.params[3] = pos2[1];\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:{\n                // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                /*const pos1: Vector3 = rotateDot(item.params[0], item.params[1], cx, cy, angleRad, decimalPlaces);\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];*/\n\n                const pos2: Vector3 = rotateDot([item.params[5], item.params[6]], transformOrigin, angleRad, decimalPlaces);\n                item.params[5] = pos2[0];\n                item.params[6] = pos2[1];\n                break;\n            }\n        }\n    }\n\n    const rel = pathDataToRelative(abs);\n    return pathDataToString(rel, true, decimalPlaces);\n};\n\nexport const rotatePath = (d: string, angleDegrees: number, decimalPlaces = 2) => {\n\n    const bbox = getPathBBox(d);\n\n    const x = bbox?.x ?? 0;\n    const y = bbox?.y ?? 0;\n    const w = bbox?.w ?? 0;\n    const h = bbox?.h ?? 0;\n\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n\n    return rotatePathAroundPoint(d, [cx, cy], angleDegrees, decimalPlaces);\n};\n\n// ---------------------- SCALE --------------------------\n\nconst scaleDot = (point: Vector2, scaleVector: Vector2, transformOrigin: Vector2, decimalPlaces = 2) => {\n    return m2ScaleAtPointH(\n        [scaleVector[0], scaleVector[1], 1],\n        [transformOrigin[0], transformOrigin[1], 1],\n        [point[0], point[1], 1],\n        decimalPlaces\n    );\n};\n\nexport const scalePathAroundPoint = (d: string, scaleVector: Vector2, transformOrigin: Vector2, decimalPlaces = 2) => {\n    if(!d) return d;\n\n    const parsed = parsePath(d);\n    if(parsed.errors.length > 0) return d;\n\n    const abs = pathDataToAbsolute(parsed);\n    if(!abs || abs.commands.length <= 0) return d;\n\n    const max = maximizeAbsolutePath(abs);\n    for(const item of max.commands){\n\n        switch(item.command){\n\n            case EPathDataCommand.MoveToAbs:\n            case EPathDataCommand.LineToAbs:{\n                // 2 params (x, y)\n\n                const pos: Vector3 = scaleDot(\n                    [item.params[0], item.params[1]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n\n                item.params[0] = pos[0];\n                item.params[1] = pos[1];\n                break;\n            }\n\n            case EPathDataCommand.CubicCurveToAbs:{\n                // 6 parameters\n                const pos1: Vector3 = scaleDot(\n                    [item.params[0], item.params[1]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];\n\n                const pos2: Vector3 = scaleDot(\n                    [item.params[2], item.params[3]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[2] = pos2[0];\n                item.params[3] = pos2[1];\n\n                const pos3: Vector3 = scaleDot(\n                    [item.params[4], item.params[5]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[4] = pos3[0];\n                item.params[5] = pos3[1];\n                break;\n            }\n\n            case EPathDataCommand.QuadraticCurveToAbs:{\n                // 4 parameters\n                const pos1: Vector3 = scaleDot(\n                    [item.params[0], item.params[1]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];\n\n                const pos2: Vector3 = scaleDot(\n                    [item.params[2], item.params[3]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[2] = pos2[0];\n                item.params[3] = pos2[1];\n                break;\n            }\n\n            case EPathDataCommand.ArcAbs:{\n                // rx ry x-axis-rotation large-arc-flag sweep-flag x y\n                /*\n                const pos1: Vector3 = scaleDot(\n                    [item.params[0], item.params[1]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[0] = pos1[0];\n                item.params[1] = pos1[1];*/\n\n                const pos2: Vector3 = scaleDot(\n                    [item.params[5], item.params[6]],\n                    scaleVector,\n                    transformOrigin,\n                    decimalPlaces\n                );\n                item.params[5] = pos2[0];\n                item.params[6] = pos2[1];\n                break;\n            }\n        }\n    }\n\n    //const rel = pathDataToRelative(abs);\n    return pathDataToString(abs, false, decimalPlaces);\n};\n\nexport const scalePath = (d: string, scaleVector: Vector2, decimalPlaces = 2) => {\n\n    const bbox = getPathBBox(d);\n\n    const x = bbox?.x ?? 0;\n    const y = bbox?.y ?? 0;\n    const w = bbox?.w ?? 0;\n    const h = bbox?.h ?? 0;\n\n    const cx = x + w / 2;\n    const cy = y + h / 2;\n\n    return scalePathAroundPoint(d, scaleVector, [cx, cy], decimalPlaces);\n};", "import { setAttributes, SVG_NAMESPACE } from '../core';\n\nexport interface IAnimationProps{\n    document?: Document;\n\n    id?: string;\n    classes?: string;\n    style?: string;\n\n    // Animation timing attributes\n    begin?: string;\n    dur?: string;\n    end?: string;\n    min?: string;\n    max?: string;\n    restart?: string;\n    repeatCount?: number|string;\n    repeatDur?: string;\n    fill?: string;\n\n    // Animation value attributes\n    calcMode?: string;\n    values?: string;\n    keyTimes?: string;\n    keySplines?: string;\n    from?: number|string;\n    to?: number|string;\n    by?: number|string;\n\n    // Other Animation attributes\n    attributeName?: string;\n    additive?: string;\n    accumulate?: string;\n}\n\nexport const getCommonAnimationAttributes = (props?: IAnimationProps) : [string, string|number|undefined][] => {\n\n    if(!props) return [];\n\n    return [\n        ['id', props?.id],\n        ['class', props?.classes],\n        ['style', props?.style],\n\n        // Animation timing attributes\n        ['begin', props?.begin],\n        ['dur', props?.dur],\n        ['end', props?.end],\n        ['min', props?.min],\n        ['max', props?.max],\n        ['restart', props?.restart],\n        ['repeatCount', props?.repeatCount],\n        ['repeatDur', props?.repeatDur],\n        ['fill', props?.fill],\n\n        // Animation value attributes\n        ['calcMode', props?.calcMode],\n        ['values', props?.values],\n        ['keyTimes', props?.keyTimes],\n        ['keySplines', props?.keySplines],\n        ['from', props?.from],\n        ['to', props?.to],\n        ['by', props?.by],\n\n        // Other Animation attributes\n        ['attributeName', props?.attributeName],\n        ['additive', props?.additive],\n        ['accumulate', props?.accumulate],\n    ];\n};\n\n/**\n * Create <animate> element.\n */\nexport const createAnimate = (props?: IAnimationProps) : SVGAnimateElement => {\n\n    const doc = props?.document || window.document;\n\n    const $animate = doc.createElementNS(SVG_NAMESPACE, 'animate');\n\n    setAttributes($animate, [\n        ...getCommonAnimationAttributes(props),\n    ]);\n\n    return $animate;\n};\n\nexport interface ICreateAnimateMotionProps extends IAnimationProps{\n    keyPoints?: string;\n    path?: string|number;\n    rotate?: string|number;\n}\n\n/**\n * Create <animateMotion> element.\n */\nexport const createAnimateMotion = (props?: ICreateAnimateMotionProps) : SVGAnimateMotionElement => {\n\n    const doc = props?.document || window.document;\n\n    const $animateMotion = doc.createElementNS(SVG_NAMESPACE, 'animateMotion');\n\n    setAttributes($animateMotion, [\n        ['keyPoints', props?.keyPoints],\n        ['path', props?.path],\n        ['rotate', props?.rotate],\n        ...getCommonAnimationAttributes(props),\n    ]);\n\n    return $animateMotion;\n};\n\nexport interface ICreateAnimateTransformProps extends IAnimationProps{\n    type?: string;\n    attributeType?: string;\n}\n\n/**\n * Create <animateTransform> element.\n */\nexport const createAnimateTransform = (props?: ICreateAnimateTransformProps) : SVGAnimateTransformElement => {\n\n    const doc = props?.document || window.document;\n\n    const $animateTransform = doc.createElementNS(SVG_NAMESPACE, 'animateTransform');\n\n    setAttributes($animateTransform, [\n        ['type', props?.type],\n        ['attributeType', props?.attributeType],\n        ...getCommonAnimationAttributes(props),\n    ]);\n\n    return $animateTransform;\n};\n\nexport interface ICreateMPathProps{\n    document?: Document;\n\n    id?: string;\n    classes?: string;\n    xlinkHref?: string\n}\n\n/**\n * Create <mpath> element.\n */\nexport const createMPath = (props?: ICreateMPathProps) : SVGMPathElement => {\n\n    const doc = props?.document || window.document;\n\n    const $mpath = doc.createElementNS(SVG_NAMESPACE, 'mpath');\n\n    setAttributes($mpath, [\n        ['id', props?.id],\n        ['class', props?.classes],\n        ['xlink:href', props?.xlinkHref],\n    ]);\n\n    return $mpath;\n};", "// This file is autogenerated. It's used to publish ESM to npm.\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\nvar trimLeft = /^\\s+/;\nvar trimRight = /\\s+$/;\nfunction tinycolor(color, opts) {\n  color = color ? color : \"\";\n  opts = opts || {};\n\n  // If input is already a tinycolor, return itself\n  if (color instanceof tinycolor) {\n    return color;\n  }\n  // If we are called as a function, call using new instead\n  if (!(this instanceof tinycolor)) {\n    return new tinycolor(color, opts);\n  }\n  var rgb = inputToRGB(color);\n  this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n  this._gradientType = opts.gradientType;\n\n  // Don't let the range of [0,255] come back in [0,1].\n  // Potentially lose a little bit of precision here, but will fix issues where\n  // .5 gets interpreted as half of the total, instead of half of 1\n  // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n  if (this._r < 1) this._r = Math.round(this._r);\n  if (this._g < 1) this._g = Math.round(this._g);\n  if (this._b < 1) this._b = Math.round(this._b);\n  this._ok = rgb.ok;\n}\ntinycolor.prototype = {\n  isDark: function isDark() {\n    return this.getBrightness() < 128;\n  },\n  isLight: function isLight() {\n    return !this.isDark();\n  },\n  isValid: function isValid() {\n    return this._ok;\n  },\n  getOriginalInput: function getOriginalInput() {\n    return this._originalInput;\n  },\n  getFormat: function getFormat() {\n    return this._format;\n  },\n  getAlpha: function getAlpha() {\n    return this._a;\n  },\n  getBrightness: function getBrightness() {\n    //http://www.w3.org/TR/AERT#color-contrast\n    var rgb = this.toRgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  },\n  getLuminance: function getLuminance() {\n    //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    var rgb = this.toRgb();\n    var RsRGB, GsRGB, BsRGB, R, G, B;\n    RsRGB = rgb.r / 255;\n    GsRGB = rgb.g / 255;\n    BsRGB = rgb.b / 255;\n    if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n    if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n    if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  },\n  setAlpha: function setAlpha(value) {\n    this._a = boundAlpha(value);\n    this._roundA = Math.round(100 * this._a) / 100;\n    return this;\n  },\n  toHsv: function toHsv() {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: this._a\n    };\n  },\n  toHsvString: function toHsvString() {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    var h = Math.round(hsv.h * 360),\n      s = Math.round(hsv.s * 100),\n      v = Math.round(hsv.v * 100);\n    return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n  },\n  toHsl: function toHsl() {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    return {\n      h: hsl.h * 360,\n      s: hsl.s,\n      l: hsl.l,\n      a: this._a\n    };\n  },\n  toHslString: function toHslString() {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    var h = Math.round(hsl.h * 360),\n      s = Math.round(hsl.s * 100),\n      l = Math.round(hsl.l * 100);\n    return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n  },\n  toHex: function toHex(allow3Char) {\n    return rgbToHex(this._r, this._g, this._b, allow3Char);\n  },\n  toHexString: function toHexString(allow3Char) {\n    return \"#\" + this.toHex(allow3Char);\n  },\n  toHex8: function toHex8(allow4Char) {\n    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n  },\n  toHex8String: function toHex8String(allow4Char) {\n    return \"#\" + this.toHex8(allow4Char);\n  },\n  toRgb: function toRgb() {\n    return {\n      r: Math.round(this._r),\n      g: Math.round(this._g),\n      b: Math.round(this._b),\n      a: this._a\n    };\n  },\n  toRgbString: function toRgbString() {\n    return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n  },\n  toPercentageRgb: function toPercentageRgb() {\n    return {\n      r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n      g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n      b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n      a: this._a\n    };\n  },\n  toPercentageRgbString: function toPercentageRgbString() {\n    return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n  },\n  toName: function toName() {\n    if (this._a === 0) {\n      return \"transparent\";\n    }\n    if (this._a < 1) {\n      return false;\n    }\n    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n  },\n  toFilter: function toFilter(secondColor) {\n    var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n    var secondHex8String = hex8String;\n    var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n    if (secondColor) {\n      var s = tinycolor(secondColor);\n      secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n    }\n    return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n  },\n  toString: function toString(format) {\n    var formatSet = !!format;\n    format = format || this._format;\n    var formattedString = false;\n    var hasAlpha = this._a < 1 && this._a >= 0;\n    var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === \"name\" && this._a === 0) {\n        return this.toName();\n      }\n      return this.toRgbString();\n    }\n    if (format === \"rgb\") {\n      formattedString = this.toRgbString();\n    }\n    if (format === \"prgb\") {\n      formattedString = this.toPercentageRgbString();\n    }\n    if (format === \"hex\" || format === \"hex6\") {\n      formattedString = this.toHexString();\n    }\n    if (format === \"hex3\") {\n      formattedString = this.toHexString(true);\n    }\n    if (format === \"hex4\") {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === \"hex8\") {\n      formattedString = this.toHex8String();\n    }\n    if (format === \"name\") {\n      formattedString = this.toName();\n    }\n    if (format === \"hsl\") {\n      formattedString = this.toHslString();\n    }\n    if (format === \"hsv\") {\n      formattedString = this.toHsvString();\n    }\n    return formattedString || this.toHexString();\n  },\n  clone: function clone() {\n    return tinycolor(this.toString());\n  },\n  _applyModification: function _applyModification(fn, args) {\n    var color = fn.apply(null, [this].concat([].slice.call(args)));\n    this._r = color._r;\n    this._g = color._g;\n    this._b = color._b;\n    this.setAlpha(color._a);\n    return this;\n  },\n  lighten: function lighten() {\n    return this._applyModification(_lighten, arguments);\n  },\n  brighten: function brighten() {\n    return this._applyModification(_brighten, arguments);\n  },\n  darken: function darken() {\n    return this._applyModification(_darken, arguments);\n  },\n  desaturate: function desaturate() {\n    return this._applyModification(_desaturate, arguments);\n  },\n  saturate: function saturate() {\n    return this._applyModification(_saturate, arguments);\n  },\n  greyscale: function greyscale() {\n    return this._applyModification(_greyscale, arguments);\n  },\n  spin: function spin() {\n    return this._applyModification(_spin, arguments);\n  },\n  _applyCombination: function _applyCombination(fn, args) {\n    return fn.apply(null, [this].concat([].slice.call(args)));\n  },\n  analogous: function analogous() {\n    return this._applyCombination(_analogous, arguments);\n  },\n  complement: function complement() {\n    return this._applyCombination(_complement, arguments);\n  },\n  monochromatic: function monochromatic() {\n    return this._applyCombination(_monochromatic, arguments);\n  },\n  splitcomplement: function splitcomplement() {\n    return this._applyCombination(_splitcomplement, arguments);\n  },\n  // Disabled until https://github.com/bgrins/TinyColor/issues/254\n  // polyad: function (number) {\n  //   return this._applyCombination(polyad, [number]);\n  // },\n  triad: function triad() {\n    return this._applyCombination(polyad, [3]);\n  },\n  tetrad: function tetrad() {\n    return this._applyCombination(polyad, [4]);\n  }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function (color, opts) {\n  if (_typeof(color) == \"object\") {\n    var newColor = {};\n    for (var i in color) {\n      if (color.hasOwnProperty(i)) {\n        if (i === \"a\") {\n          newColor[i] = color[i];\n        } else {\n          newColor[i] = convertToPercentage(color[i]);\n        }\n      }\n    }\n    color = newColor;\n  }\n  return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n  var rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n  var a = 1;\n  var s = null;\n  var v = null;\n  var l = null;\n  var ok = false;\n  var format = false;\n  if (typeof color == \"string\") {\n    color = stringInputToObject(color);\n  }\n  if (_typeof(color) == \"object\") {\n    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n      rgb = rgbToRgb(color.r, color.g, color.b);\n      ok = true;\n      format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n      s = convertToPercentage(color.s);\n      v = convertToPercentage(color.v);\n      rgb = hsvToRgb(color.h, s, v);\n      ok = true;\n      format = \"hsv\";\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n      s = convertToPercentage(color.s);\n      l = convertToPercentage(color.l);\n      rgb = hslToRgb(color.h, s, l);\n      ok = true;\n      format = \"hsl\";\n    }\n    if (color.hasOwnProperty(\"a\")) {\n      a = color.a;\n    }\n  }\n  a = boundAlpha(a);\n  return {\n    ok: ok,\n    format: color.format || format,\n    r: Math.min(255, Math.max(rgb.r, 0)),\n    g: Math.min(255, Math.max(rgb.g, 0)),\n    b: Math.min(255, Math.max(rgb.b, 0)),\n    a: a\n  };\n}\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b) {\n  return {\n    r: bound01(r, 255) * 255,\n    g: bound01(g, 255) * 255,\n    b: bound01(b, 255) * 255\n  };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n  var r, g, b;\n  h = bound01(h, 360);\n  s = bound01(s, 100);\n  l = bound01(l, 100);\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n  }\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    v = max;\n  var d = max - min;\n  s = max === 0 ? 0 : d / max;\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hsvToRgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  var i = Math.floor(h),\n    f = h - i,\n    p = v * (1 - s),\n    q = v * (1 - f * s),\n    t = v * (1 - (1 - f) * s),\n    mod = i % 6,\n    r = [v, q, p, p, t, v][mod],\n    g = [t, v, v, q, p, p][mod],\n    b = [p, p, t, v, v, q][mod];\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n  // Return a 3 character hex if possible\n  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n  return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n  // Return a 4 character hex if possible\n  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n  return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n  var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n  return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n  if (!color1 || !color2) return false;\n  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\ntinycolor.random = function () {\n  return tinycolor.fromRatio({\n    r: Math.random(),\n    g: Math.random(),\n    b: Math.random()\n  });\n};\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction _desaturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s -= amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\nfunction _saturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s += amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\nfunction _greyscale(color) {\n  return tinycolor(color).desaturate(100);\n}\nfunction _lighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l += amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\nfunction _brighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var rgb = tinycolor(color).toRgb();\n  rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n  rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n  rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n  return tinycolor(rgb);\n}\nfunction _darken(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l -= amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction _spin(color, amount) {\n  var hsl = tinycolor(color).toHsl();\n  var hue = (hsl.h + amount) % 360;\n  hsl.h = hue < 0 ? 360 + hue : hue;\n  return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction _complement(color) {\n  var hsl = tinycolor(color).toHsl();\n  hsl.h = (hsl.h + 180) % 360;\n  return tinycolor(hsl);\n}\nfunction polyad(color, number) {\n  if (isNaN(number) || number <= 0) {\n    throw new Error(\"Argument to polyad must be a positive number\");\n  }\n  var hsl = tinycolor(color).toHsl();\n  var result = [tinycolor(color)];\n  var step = 360 / number;\n  for (var i = 1; i < number; i++) {\n    result.push(tinycolor({\n      h: (hsl.h + i * step) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }));\n  }\n  return result;\n}\nfunction _splitcomplement(color) {\n  var hsl = tinycolor(color).toHsl();\n  var h = hsl.h;\n  return [tinycolor(color), tinycolor({\n    h: (h + 72) % 360,\n    s: hsl.s,\n    l: hsl.l\n  }), tinycolor({\n    h: (h + 216) % 360,\n    s: hsl.s,\n    l: hsl.l\n  })];\n}\nfunction _analogous(color, results, slices) {\n  results = results || 6;\n  slices = slices || 30;\n  var hsl = tinycolor(color).toHsl();\n  var part = 360 / slices;\n  var ret = [tinycolor(color)];\n  for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n    hsl.h = (hsl.h + part) % 360;\n    ret.push(tinycolor(hsl));\n  }\n  return ret;\n}\nfunction _monochromatic(color, results) {\n  results = results || 6;\n  var hsv = tinycolor(color).toHsv();\n  var h = hsv.h,\n    s = hsv.s,\n    v = hsv.v;\n  var ret = [];\n  var modification = 1 / results;\n  while (results--) {\n    ret.push(tinycolor({\n      h: h,\n      s: s,\n      v: v\n    }));\n    v = (v + modification) % 1;\n  }\n  return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function (color1, color2, amount) {\n  amount = amount === 0 ? 0 : amount || 50;\n  var rgb1 = tinycolor(color1).toRgb();\n  var rgb2 = tinycolor(color2).toRgb();\n  var p = amount / 100;\n  var rgba = {\n    r: (rgb2.r - rgb1.r) * p + rgb1.r,\n    g: (rgb2.g - rgb1.g) * p + rgb1.g,\n    b: (rgb2.b - rgb1.b) * p + rgb1.b,\n    a: (rgb2.a - rgb1.a) * p + rgb1.a\n  };\n  return tinycolor(rgba);\n};\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function (color1, color2) {\n  var c1 = tinycolor(color1);\n  var c2 = tinycolor(color2);\n  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function (color1, color2, wcag2) {\n  var readability = tinycolor.readability(color1, color2);\n  var wcag2Parms, out;\n  out = false;\n  wcag2Parms = validateWCAG2Parms(wcag2);\n  switch (wcag2Parms.level + wcag2Parms.size) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      out = readability >= 4.5;\n      break;\n    case \"AAlarge\":\n      out = readability >= 3;\n      break;\n    case \"AAAsmall\":\n      out = readability >= 7;\n      break;\n  }\n  return out;\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function (baseColor, colorList, args) {\n  var bestColor = null;\n  var bestScore = 0;\n  var readability;\n  var includeFallbackColors, level, size;\n  args = args || {};\n  includeFallbackColors = args.includeFallbackColors;\n  level = args.level;\n  size = args.size;\n  for (var i = 0; i < colorList.length; i++) {\n    readability = tinycolor.readability(baseColor, colorList[i]);\n    if (readability > bestScore) {\n      bestScore = readability;\n      bestColor = tinycolor(colorList[i]);\n    }\n  }\n  if (tinycolor.isReadable(baseColor, bestColor, {\n    level: level,\n    size: size\n  }) || !includeFallbackColors) {\n    return bestColor;\n  } else {\n    args.includeFallbackColors = false;\n    return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n  }\n};\n\n// Big List of Colors\n// ------------------\n// <https://www.w3.org/TR/css-color-4/#named-colors>\nvar names = tinycolor.names = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"0ff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"00f\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  burntsienna: \"ea7e5d\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"0ff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkgrey: \"a9a9a9\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"f0f\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  grey: \"808080\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightgrey: \"d3d3d3\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"789\",\n  lightslategrey: \"789\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"0f0\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"f0f\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  rebeccapurple: \"663399\",\n  red: \"f00\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"fff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ff0\",\n  yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n  var flipped = {};\n  for (var i in o) {\n    if (o.hasOwnProperty(i)) {\n      flipped[o[i]] = i;\n    }\n  }\n  return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n  a = parseFloat(a);\n  if (isNaN(a) || a < 0 || a > 1) {\n    a = 1;\n  }\n  return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n  if (isOnePointZero(n)) n = \"100%\";\n  var processPercent = isPercentage(n);\n  n = Math.min(max, Math.max(0, parseFloat(n)));\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    n = parseInt(n * max, 10) / 100;\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return n % max / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n  return Math.min(1, Math.max(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n  return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n  return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n  return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n  return c.length == 1 ? \"0\" + c : \"\" + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n  if (n <= 1) {\n    n = n * 100 + \"%\";\n  }\n  return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n  return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n  return parseIntFromHex(h) / 255;\n}\nvar matchers = function () {\n  // <http://www.w3.org/TR/css3-values/#integers>\n  var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n  // <http://www.w3.org/TR/css3-values/#number-value>\n  var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n  var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n  // Actual matching.\n  // Parentheses and commas are optional, but not required.\n  // Whitespace can take the place of commas or opening paren\n  var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n  var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n  return {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n  };\n}();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n  return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n  color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n  var named = false;\n  if (names[color]) {\n    color = names[color];\n    named = true;\n  } else if (color == \"transparent\") {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0,\n      format: \"name\"\n    };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  var match;\n  if (match = matchers.rgb.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3]\n    };\n  }\n  if (match = matchers.rgba.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hsl.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      l: match[3]\n    };\n  }\n  if (match = matchers.hsla.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      l: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hsv.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      v: match[3]\n    };\n  }\n  if (match = matchers.hsva.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      v: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hex8.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4]),\n      format: named ? \"name\" : \"hex8\"\n    };\n  }\n  if (match = matchers.hex6.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      format: named ? \"name\" : \"hex\"\n    };\n  }\n  if (match = matchers.hex4.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      a: convertHexToDecimal(match[4] + \"\" + match[4]),\n      format: named ? \"name\" : \"hex8\"\n    };\n  }\n  if (match = matchers.hex3.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      format: named ? \"name\" : \"hex\"\n    };\n  }\n  return false;\n}\nfunction validateWCAG2Parms(parms) {\n  // return valid WCAG2 parms for isReadable.\n  // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n  var level, size;\n  parms = parms || {\n    level: \"AA\",\n    size: \"small\"\n  };\n  level = (parms.level || \"AA\").toUpperCase();\n  size = (parms.size || \"small\").toLowerCase();\n  if (level !== \"AA\" && level !== \"AAA\") {\n    level = \"AA\";\n  }\n  if (size !== \"small\" && size !== \"large\") {\n    size = \"small\";\n  }\n  return {\n    level: level,\n    size: size\n  };\n}\n\nexport { tinycolor as default };\n", "import { IParticle, ISettings, IState } from '../interfaces';\nimport { circle } from 'mz-canvas';\nimport { getRandom, getRandomBoolean, getRandomHexColor, getRandomItemFromArray, Vector2 } from 'mz-math';\nimport { getPathBBox } from 'mz-svg';\nimport tinycolor from 'tinycolor2';\nimport { rgbaToString } from './colors-provider';\n\n/**\n * This method is called once on the particles' initialization.\n */\nexport const createParticles = (options: ISettings, state: IState) : IParticle[] => {\n\n    const { $canvas } = state;\n\n    const particles: IParticle[] = [];\n\n    let svgPathData: string|undefined = undefined;\n    let svgSize: Vector2|undefined = undefined;\n\n    const minSize = options.minSize as number;\n    const maxSize = options.maxSize as number;\n    const minSpeed = options.minSpeed as number;\n    const maxSpeed = options.maxSpeed as number;\n    const maxScale = options.maxScale as number;\n\n    const minScale = options.minScale as number;\n\n    for(let i= 0; i< options.particlesNumber; i++) {\n\n        const rnd = getRandom(minSize, maxSize);\n        const particleSize: Vector2 = [rnd, rnd];\n\n        // handle case when provided SVG path data -------------\n        if(options.svgPathData && options.svgPathData.length > 0){\n\n            // get random SVG shape from the provided list, and calculate it's size\n            svgPathData = getRandomItemFromArray(options.svgPathData);\n            const bbox = getPathBBox(svgPathData);\n\n            if(bbox){\n                svgSize = [\n                    particleSize[0] / bbox.w,\n                    particleSize[1] / bbox.h,\n                ];\n            }\n        }\n\n        let color;\n\n        if(options.particlesColors && options.particlesColors.length > 0){\n            color = getRandomItemFromArray(options.particlesColors);\n        }\n        else{\n            // when no color is provided ---> get random color\n            color = getRandomHexColor();\n        }\n\n        const tColor = tinycolor(color);\n        const tColorRGB = tColor.toRgb();\n\n        particles.push({\n            center: [\n                getRandom(0, $canvas.width),\n                getRandom(0, $canvas.height),\n            ],\n            speed: [\n                getRandom(minSpeed, maxSpeed),\n                getRandom(minSpeed, maxSpeed),\n            ],\n            size: particleSize,\n\n            color,\n            rgbaColor: [tColorRGB.r, tColorRGB.g, tColorRGB.b, tColorRGB.a],\n\n            // SVG path props ----------\n            svgPathData,\n            svgSize,\n\n            // rotation effect ------------\n            angleRad: 0,\n            rotateCounterClockwise: getRandomBoolean(),\n\n            // scale effect ---------------\n            scale: (minScale + maxScale) / 2,\n            scaleDirection: getRandomItemFromArray([-1, 1]),\n\n            // fade in/out effect ---------\n            opacity: getRandom(0, 1),\n            opacityDirection: getRandomItemFromArray([-1, 1]),\n        });\n    }\n\n    return particles;\n};\n\nexport const moveParticle = (particle: IParticle, options: ISettings, state: IState) : IParticle => {\n\n    const { $canvas } = state;\n\n    const copy = { ...particle };\n\n    const [cx, cy]: Vector2 = particle.center;\n    const speed: Vector2 = [...particle.speed] as Vector2;\n\n    if(cx > $canvas.width || cx < 0) {\n        speed[0] = -speed[0];\n    }\n\n    if(cy > $canvas.height || cy < 0) {\n        speed[1] = -speed[1];\n    }\n\n    copy.speed = speed;\n    copy.center = [cx + copy.speed[0], cy + copy.speed[1]];\n\n    if(options.rotate) {\n        if(particle.rotateCounterClockwise){\n            copy.angleRad += Math.PI / 180;\n        }\n        else{\n            copy.angleRad -= Math.PI / 180;\n        }\n    }\n\n    if(options.scaleInOut){\n        const scaleStep = options.scaleStep as number;\n        const maxScale = options.maxScale as number;\n        const minScale = options.minScale as number;\n\n        if(copy.scaleDirection > 0){\n            copy.scale += scaleStep;\n        }\n        else{\n            copy.scale -= scaleStep;\n        }\n\n        if(copy.scale > maxScale){\n            copy.scale = maxScale;\n            copy.scaleDirection = -1;\n        }\n\n        if(copy.scale < minScale){\n            copy.scale = minScale;\n            copy.scaleDirection = 1;\n        }\n    }\n\n    if(options.fadeInOut){\n        const opacityStep = options.opacityStep as number;\n\n        if(copy.opacityDirection > 0){\n            copy.opacity += opacityStep;\n        }\n        else{\n            copy.opacity -= opacityStep;\n        }\n\n        if(copy.opacity > 1){\n            copy.scale = 1;\n            copy.opacityDirection = -1;\n        }\n\n        if(copy.opacity < 0){\n            copy.opacity = 0;\n            copy.opacityDirection = 1;\n        }\n    }\n\n    return copy;\n};\n\nexport const drawParticle = (particle: IParticle, options: ISettings, state: IState) => {\n\n    const { ctx } = state;\n\n    if(!options.svgPathData){\n\n        ctx.save();\n\n        const { size } = particle;\n        let r = size[0];\n\n        if(options.scaleInOut){\n            r *= particle.scale;\n        }\n\n        const fillStyle = options.fadeInOut ?\n            rgbaToString(\n                particle.rgbaColor[0],\n                particle.rgbaColor[1],\n                particle.rgbaColor[2],\n                particle.opacity\n            ) :\n            particle.color;\n\n        circle({\n            cx: particle.center[0],\n            cy: particle.center[1],\n            r,\n            fillStyle,\n        }, ctx);\n\n        ctx.restore();\n        return;\n    }\n\n    const [w, h] = particle.size;\n\n    const path = new Path2D(particle.svgPathData);\n    ctx.save();\n\n    const halfWidth = w/2;\n    const halfHeight = h/2;\n\n    const [cx, cy] = [particle.center[0] - halfWidth, particle.center[1] - halfHeight];\n    ctx.translate(cx, cy);\n\n    if(particle.svgSize){\n        // scale the path -------------------------------\n        ctx.translate(halfWidth, halfHeight);\n        ctx.scale(...particle.svgSize);\n        ctx.translate(-halfWidth, -halfHeight);\n    }\n\n    if(options.rotate) {\n        ctx.translate(halfWidth, halfHeight);\n        ctx.rotate(particle.angleRad);\n        ctx.translate(-halfWidth, -halfHeight);\n    }\n\n    if(options.scaleInOut){\n        ctx.translate(halfWidth, halfHeight);\n        ctx.scale(particle.scale, particle.scale);\n        ctx.translate(-halfWidth, -halfHeight);\n    }\n\n    if(options.fadeInOut){\n        ctx.fillStyle = rgbaToString(\n            particle.rgbaColor[0],\n            particle.rgbaColor[1],\n            particle.rgbaColor[2],\n            particle.opacity,\n        );\n    }\n    else{\n        ctx.fillStyle = particle.color;\n    }\n\n    ctx.fill(path);\n    ctx.restore();\n};\n\n\n", "import { ISettings } from '../interfaces';\n\nexport const DEFAULTS: ISettings = {\n    // canvas settings --------------\n    canvasWidth: 600,\n    canvasHeight: 600,\n\n    particlesNumber: 40,\n    particlesColors: [],\n\n    minSpeed: -2,\n    maxSpeed: 2,\n\n    minSize: 5,\n    maxSize: 10,\n\n    // connection lines ------------\n    connected: true,\n    maxConnectionSize: 150,\n    connectionColor: 'rgb(45, 56, 91)',\n\n    // scale effect\n    maxScale: 2,\n    minScale: 0.5,\n    scaleStep: 0.01,\n\n    // fade in/out effect ---------\n    opacityStep: 0.001,\n};\n\n/**\n * Merge settings with the defaults\n */\nexport const mergeSettings = (defaults: ISettings, settings?: ISettings) : ISettings => {\n    if(!settings) return { ...defaults };\n    return { ...defaults, ...settings };\n};\n", "import { ISettings, IState } from './interfaces';\nimport { drawConnections } from './domain/connections-provider';\nimport { createParticles, drawParticle, moveParticle } from './domain/particles-provider';\nimport { DEFAULTS, mergeSettings } from './domain/settings-provider';\nimport { canvas, IRectProps, rect, setCanvasSize } from 'mz-canvas';\nimport { animate } from 'mz-math';\nimport tinycolor from 'tinycolor2';\n\nconst redraw = (options: ISettings, state: IState) => {\n\n    const { $canvas, ctx } = state;\n\n    // set bg color or clear the canvas ---------------------------\n    const rectProps: IRectProps = {\n        x: 0,\n        y: 0,\n        w: $canvas.width,\n        h: $canvas.height,\n    };\n\n    if(options.canvasColor){\n        rectProps.fillStyle = options.canvasColor;\n    }\n    else{\n        rectProps.clear = true;\n    }\n\n    rect(rectProps, ctx);\n\n    // draw the particle connections -------------------------------\n    if(options.connected){\n        drawConnections(options, state);\n    }\n\n    // draw the updated particles ------------------\n    for(let i= 0; i<state.particles.length; i++){\n        const particle = state.particles[i];\n        drawParticle(particle, options, state);\n        state.particles[i] = moveParticle(particle, options, state);\n    }\n};\n\n/**\n * Entry point.\n */\nexport const init = (settings?: ISettings) => {\n\n    const options = mergeSettings(DEFAULTS, settings);\n\n    const canvasProps = {\n        width: options.canvasWidth as number|string,\n        height: options.canvasHeight as number|string,\n    };\n\n    const { ctx, $canvas } = canvas(canvasProps);\n\n    if(!ctx) return;\n\n    // parse connection lines color ----------\n    const connectionsColor = tinycolor(options.connectionColor);\n    const tConnectionsRGB = connectionsColor.toRgb();\n\n    const state: IState = {\n        connectionRgbColor: [tConnectionsRGB.r, tConnectionsRGB.g, tConnectionsRGB.b, tConnectionsRGB.a],\n        particles: [],\n        ctx,\n        $canvas,\n    };\n\n    // create random particles -----------------------------\n    state.particles = createParticles(options, state);\n\n    const api = animate({\n\n        // A function to be called on each animation frame.\n        // It receives an object of type IAnimationResult.\n        callback: () => {\n            if(!ctx) return;\n            redraw(options, state);\n        },\n        restartOnResize: true,\n        resizeCallback: () => {\n            setCanvasSize($canvas, ctx, canvasProps);\n            redraw(options, state);\n        },\n    });\n\n    // Starts the animation.\n    api.start();\n\n    // document.body.append($canvas);\n    return $canvas;\n};", "import { init as particles } from './app';\n\ndeclare global {\n    interface Window {\n        particles: typeof particles,\n    }\n}\n\nwindow.particles = particles;\n"],
  "mappings": "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",
  "names": ["isNumber", "value", "setAttributes", "$canvas", "attributes", "attr", "key", "setContextProps", "props", "ctx", "prop", "setCanvasSize", "restoreImageData", "isNumericDims", "B", "_width", "_height", "isCanvasInDOM", "rect", "imageData", "canvas", "stroke", "fill", "line", "x1", "y1", "x2", "y2", "rect", "props", "ctx", "x", "y", "w", "h", "fill", "stroke", "circle", "props", "ctx", "cx", "cy", "r", "startAngleRad", "endAngleRad", "fill", "stroke", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "vSub", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "vLength", "vector", "decimalPlaces", "sum", "i", "setDecimalPlaces", "v2Distance", "vector1", "vector2", "decimalPlaces", "diff", "vSub", "vLength", "getRandom", "min", "max", "decimalPlaces", "setDecimalPlaces", "getRandomInt", "getRandomBoolean", "getRandomItemFromArray", "array", "randomIndex", "getRandomHexColor", "hslColor", "getRandomHSLColor", "hslToHex", "h", "getRandom", "s", "l", "hslToHex", "hsl", "h", "s", "l", "r", "g", "b", "hue2rgb", "p", "q", "t", "toHex", "x", "hex", "animate", "props", "_duration", "startTime", "animationId", "elapsed", "previousTimeStamp", "animating", "observer", "stop", "restart", "start", "pause", "resume", "step", "timeStamp", "getResult", "observerHandler", "_entries", "_observer", "getElapsedTime", "isAnimating", "getStartTime", "getPercent", "getResizeObserver", "rgbaToString", "r", "g", "b", "a", "drawConnections", "options", "state", "particles", "ctx", "connectionRgbColor", "maxConnectionSize", "i", "particle1", "j", "particle2", "distance", "gr", "opacity", "R", "rgbaToString", "Le", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "degreesToRadians", "degrees", "res", "isNumber", "value", "linearEquation", "equation", "decimalPlaces", "a", "b", "diff", "setDecimalPlaces", "quadraticEquation", "c", "d", "res", "discriminant", "t1", "t2", "v2QuadraticBezierCurve", "t", "startControlPoint", "centerControlPoint", "endControlPoint", "temp1", "temp2", "temp3", "v2CubicBezierCurve", "center1ControlPoint", "center2ControlPoint", "temp4", "v2QuadraticBezierCurveExtrema", "a1", "b1", "res1", "a2", "b2", "res2", "v2CubicBezierCurveExtrema", "c1", "equation1", "c2", "equation2", "num", "v2QuadraticBezierBBox", "extrema", "minX", "minY", "maxX", "maxY", "percent", "point", "x", "y", "v2CubicBezierBBox", "NUMBER_REGEX", "scan", "pathData", "result", "current", "line", "col", "isEnd", "addKeywordToken", "tokenType", "addNumberToken", "addError", "msg", "matchNumber", "scanToken", "char", "matchRes", "parse", "scanResult", "tokens", "errors", "error", "token", "areArcFlagsValid", "_a", "_b", "val4", "val5", "parseCommand", "paramsCount", "nextParamsTokenType", "isRelative", "params", "i", "nextTokens", "nextCommand", "nextParams", "j", "parseNext", "pathDataToAbsolute", "pathData", "commands", "x", "y", "mx", "my", "i", "savedX", "savedY", "maximizeAbsolutePath", "pathData", "commands", "i", "prev", "y", "parsePath", "d", "scanResult", "scan", "parse", "getAngle", "bx", "by", "PI2", "t1", "formatBBox", "xmin", "xmax", "ymin", "ymax", "getArcBoundingBox", "x1", "y1", "rx", "ry", "angleRad", "largeArc", "sweep", "x2", "y2", "x1prime", "y1prime", "radicant", "cxPrime", "cyPrime", "ratio", "factor", "cx", "cy", "txMin", "txMax", "tyMin", "tyMax", "tmpY", "tmpX", "angle1", "angle2", "otherArc", "getPathBBox", "d", "decimalPlaces", "_a", "_b", "_c", "_d", "parsed", "parsePath", "abs", "pathDataToAbsolute", "minX", "minY", "maxX", "maxY", "max", "maximizeAbsolutePath", "x", "y", "mx", "my", "item", "startControlPoint", "centerControlPoint1", "centerControlPoint2", "endControlPoint", "bbox", "Fn", "centerControlPoint", "Zn", "angleDeg", "largeArcFlag", "sweepFlag", "endX", "endY", "Jt", "i", "_typeof", "obj", "trimLeft", "trimRight", "tinycolor", "color", "opts", "rgb", "inputToRGB", "RsRGB", "GsRGB", "BsRGB", "R", "G", "B", "value", "boundAlpha", "hsv", "rgbToHsv", "h", "s", "v", "hsl", "rgbToHsl", "l", "allow3Char", "rgbToHex", "allow4Char", "rgbaToHex", "bound01", "hexNames", "secondColor", "hex8String", "rgbaToArgbHex", "secondHex8String", "gradientType", "format", "formatSet", "formattedString", "hasAlpha", "needsAlphaFormat", "fn", "args", "_lighten", "_brighten", "_darken", "_desaturate", "_saturate", "_greyscale", "_spin", "_analogous", "_complement", "_monochromatic", "_splitcomplement", "polyad", "newColor", "i", "convertToPercentage", "ok", "stringInputToObject", "isValidCSSUnit", "rgbToRgb", "hsvToRgb", "hslToRgb", "r", "g", "b", "max", "min", "d", "hue2rgb", "p", "q", "t", "f", "mod", "hex", "pad2", "a", "convertDecimalToHex", "color1", "color2", "amount", "clamp01", "hue", "number", "result", "step", "results", "slices", "part", "ret", "modification", "rgb1", "rgb2", "rgba", "c1", "c2", "wcag2", "readability", "wcag2Parms", "out", "validateWCAG2Parms", "baseColor", "colorList", "bestColor", "bestScore", "includeFallbackColors", "level", "size", "names", "flip", "o", "flipped", "n", "isOnePointZero", "processPercent", "isPercentage", "val", "parseIntFromHex", "c", "convertHexToDecimal", "matchers", "CSS_INTEGER", "CSS_NUMBER", "CSS_UNIT", "PERMISSIVE_MATCH3", "PERMISSIVE_MATCH4", "named", "match", "parms", "createParticles", "options", "state", "$canvas", "particles", "svgPathData", "svgSize", "minSize", "maxSize", "minSpeed", "maxSpeed", "maxScale", "minScale", "i", "rnd", "V", "particleSize", "fn", "bbox", "re", "color", "po", "tColorRGB", "tinycolor", "mn", "moveParticle", "particle", "copy", "__spreadValues", "cx", "cy", "speed", "scaleStep", "opacityStep", "drawParticle", "ctx", "size", "r", "fillStyle", "rgbaToString", "T", "w", "h", "path", "halfWidth", "halfHeight", "DEFAULTS", "mergeSettings", "defaults", "settings", "__spreadValues", "redraw", "options", "state", "$canvas", "ctx", "rectProps", "b", "drawConnections", "i", "particle", "drawParticle", "moveParticle", "init", "settings", "mergeSettings", "DEFAULTS", "canvasProps", "S", "tConnectionsRGB", "tinycolor", "createParticles", "qo", "v", "init"]
}
